//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;


using NopSolutions.NopCommerce.BusinessLogic.Audit;
using NopSolutions.NopCommerce.BusinessLogic.Categories;
using NopSolutions.NopCommerce.BusinessLogic.Configuration.Settings;
using NopSolutions.NopCommerce.BusinessLogic.Content.Blog;
using NopSolutions.NopCommerce.BusinessLogic.Content.Forums;
using NopSolutions.NopCommerce.BusinessLogic.Content.NewsManagement;
using NopSolutions.NopCommerce.BusinessLogic.Content.Polls;
using NopSolutions.NopCommerce.BusinessLogic.Content.Topics;
using NopSolutions.NopCommerce.BusinessLogic.CustomerManagement;
using NopSolutions.NopCommerce.BusinessLogic.Directory;
using NopSolutions.NopCommerce.BusinessLogic.Localization;
using NopSolutions.NopCommerce.BusinessLogic.Manufacturers;
using NopSolutions.NopCommerce.BusinessLogic.Measures;
using NopSolutions.NopCommerce.BusinessLogic.Media;
using NopSolutions.NopCommerce.BusinessLogic.Messages;
using NopSolutions.NopCommerce.BusinessLogic.Messages.SMS;
using NopSolutions.NopCommerce.BusinessLogic.Orders;
using NopSolutions.NopCommerce.BusinessLogic.Payment;
using NopSolutions.NopCommerce.BusinessLogic.Products;
using NopSolutions.NopCommerce.BusinessLogic.Products.Attributes;
using NopSolutions.NopCommerce.BusinessLogic.Products.Specs;
using NopSolutions.NopCommerce.BusinessLogic.Promo.Affiliates;
using NopSolutions.NopCommerce.BusinessLogic.Promo.Campaigns;
using NopSolutions.NopCommerce.BusinessLogic.Promo.Discounts;
using NopSolutions.NopCommerce.BusinessLogic.QuickBooks;
using NopSolutions.NopCommerce.BusinessLogic.Security;
using NopSolutions.NopCommerce.BusinessLogic.Shipping;
using NopSolutions.NopCommerce.BusinessLogic.Tax;
using NopSolutions.NopCommerce.BusinessLogic.Templates;
using NopSolutions.NopCommerce.BusinessLogic.Warehouses;


namespace NopSolutions.NopCommerce.BusinessLogic.Data
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class NopObjectContext : ObjectContext
    {
    
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public int Sp_ActivityLogClearAll()
        {
            return base.ExecuteFunction("Sp_ActivityLogClearAll");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="languageID">No Metadata Documentation available.</param>
        /// <param name="dateFrom">No Metadata Documentation available.</param>
        /// <param name="dateTo">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<BlogPost> Sp_BlogPostLoadAll(Nullable<global::System.Int32> languageID, Nullable<global::System.DateTime> dateFrom, Nullable<global::System.DateTime> dateTo, Nullable<global::System.Int32> pageSize, Nullable<global::System.Int32> pageIndex, ObjectParameter totalRecords)
        {
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            ObjectParameter dateFromParameter;
            if (dateFrom.HasValue)
            {
                dateFromParameter = new ObjectParameter("DateFrom", dateFrom);
            }
            else
            {
                dateFromParameter = new ObjectParameter("DateFrom", typeof(global::System.DateTime));
            }
    
            ObjectParameter dateToParameter;
            if (dateTo.HasValue)
            {
                dateToParameter = new ObjectParameter("DateTo", dateTo);
            }
            else
            {
                dateToParameter = new ObjectParameter("DateTo", typeof(global::System.DateTime));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<BlogPost>("Sp_BlogPostLoadAll", languageIDParameter, dateFromParameter, dateToParameter, pageSizeParameter, pageIndexParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="languageID">No Metadata Documentation available.</param>
        /// <param name="dateFrom">No Metadata Documentation available.</param>
        /// <param name="dateTo">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<BlogPost> Sp_BlogPostLoadAll(Nullable<global::System.Int32> languageID, Nullable<global::System.DateTime> dateFrom, Nullable<global::System.DateTime> dateTo, Nullable<global::System.Int32> pageSize, Nullable<global::System.Int32> pageIndex, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            ObjectParameter dateFromParameter;
            if (dateFrom.HasValue)
            {
                dateFromParameter = new ObjectParameter("DateFrom", dateFrom);
            }
            else
            {
                dateFromParameter = new ObjectParameter("DateFrom", typeof(global::System.DateTime));
            }
    
            ObjectParameter dateToParameter;
            if (dateTo.HasValue)
            {
                dateToParameter = new ObjectParameter("DateTo", dateTo);
            }
            else
            {
                dateToParameter = new ObjectParameter("DateTo", typeof(global::System.DateTime));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<BlogPost>("Sp_BlogPostLoadAll", mergeOption, languageIDParameter, dateFromParameter, dateToParameter, pageSizeParameter, pageIndexParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="endTime">No Metadata Documentation available.</param>
        /// <param name="orderStatusID">No Metadata Documentation available.</param>
        /// <param name="paymentStatusID">No Metadata Documentation available.</param>
        /// <param name="shippingStatusID">No Metadata Documentation available.</param>
        /// <param name="orderBy">No Metadata Documentation available.</param>
        public ObjectResult<CustomerBestReportLine> Sp_CustomerBestReport(Nullable<global::System.DateTime> startTime, Nullable<global::System.DateTime> endTime, Nullable<global::System.Int32> orderStatusID, Nullable<global::System.Int32> paymentStatusID, Nullable<global::System.Int32> shippingStatusID, Nullable<global::System.Int32> orderBy)
        {
            ObjectParameter startTimeParameter;
            if (startTime.HasValue)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter endTimeParameter;
            if (endTime.HasValue)
            {
                endTimeParameter = new ObjectParameter("EndTime", endTime);
            }
            else
            {
                endTimeParameter = new ObjectParameter("EndTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter orderStatusIDParameter;
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter paymentStatusIDParameter;
            if (paymentStatusID.HasValue)
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", paymentStatusID);
            }
            else
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter shippingStatusIDParameter;
            if (shippingStatusID.HasValue)
            {
                shippingStatusIDParameter = new ObjectParameter("ShippingStatusID", shippingStatusID);
            }
            else
            {
                shippingStatusIDParameter = new ObjectParameter("ShippingStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderByParameter;
            if (orderBy.HasValue)
            {
                orderByParameter = new ObjectParameter("OrderBy", orderBy);
            }
            else
            {
                orderByParameter = new ObjectParameter("OrderBy", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<CustomerBestReportLine>("Sp_CustomerBestReport", startTimeParameter, endTimeParameter, orderStatusIDParameter, paymentStatusIDParameter, shippingStatusIDParameter, orderByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="endTime">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="username">No Metadata Documentation available.</param>
        /// <param name="dontLoadGuestCustomers">No Metadata Documentation available.</param>
        /// <param name="dateOfBirthMonth">No Metadata Documentation available.</param>
        /// <param name="dateOfBirthDay">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<Customer> Sp_CustomerLoadAll(Nullable<global::System.DateTime> startTime, Nullable<global::System.DateTime> endTime, global::System.String email, global::System.String username, Nullable<global::System.Boolean> dontLoadGuestCustomers, Nullable<global::System.Int32> dateOfBirthMonth, Nullable<global::System.Int32> dateOfBirthDay, Nullable<global::System.Int32> pageSize, Nullable<global::System.Int32> pageIndex, ObjectParameter totalRecords)
        {
            ObjectParameter startTimeParameter;
            if (startTime.HasValue)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter endTimeParameter;
            if (endTime.HasValue)
            {
                endTimeParameter = new ObjectParameter("EndTime", endTime);
            }
            else
            {
                endTimeParameter = new ObjectParameter("EndTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("Username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("Username", typeof(global::System.String));
            }
    
            ObjectParameter dontLoadGuestCustomersParameter;
            if (dontLoadGuestCustomers.HasValue)
            {
                dontLoadGuestCustomersParameter = new ObjectParameter("DontLoadGuestCustomers", dontLoadGuestCustomers);
            }
            else
            {
                dontLoadGuestCustomersParameter = new ObjectParameter("DontLoadGuestCustomers", typeof(global::System.Boolean));
            }
    
            ObjectParameter dateOfBirthMonthParameter;
            if (dateOfBirthMonth.HasValue)
            {
                dateOfBirthMonthParameter = new ObjectParameter("DateOfBirthMonth", dateOfBirthMonth);
            }
            else
            {
                dateOfBirthMonthParameter = new ObjectParameter("DateOfBirthMonth", typeof(global::System.Int32));
            }
    
            ObjectParameter dateOfBirthDayParameter;
            if (dateOfBirthDay.HasValue)
            {
                dateOfBirthDayParameter = new ObjectParameter("DateOfBirthDay", dateOfBirthDay);
            }
            else
            {
                dateOfBirthDayParameter = new ObjectParameter("DateOfBirthDay", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Customer>("Sp_CustomerLoadAll", startTimeParameter, endTimeParameter, emailParameter, usernameParameter, dontLoadGuestCustomersParameter, dateOfBirthMonthParameter, dateOfBirthDayParameter, pageSizeParameter, pageIndexParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="endTime">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="username">No Metadata Documentation available.</param>
        /// <param name="dontLoadGuestCustomers">No Metadata Documentation available.</param>
        /// <param name="dateOfBirthMonth">No Metadata Documentation available.</param>
        /// <param name="dateOfBirthDay">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<Customer> Sp_CustomerLoadAll(Nullable<global::System.DateTime> startTime, Nullable<global::System.DateTime> endTime, global::System.String email, global::System.String username, Nullable<global::System.Boolean> dontLoadGuestCustomers, Nullable<global::System.Int32> dateOfBirthMonth, Nullable<global::System.Int32> dateOfBirthDay, Nullable<global::System.Int32> pageSize, Nullable<global::System.Int32> pageIndex, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter startTimeParameter;
            if (startTime.HasValue)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter endTimeParameter;
            if (endTime.HasValue)
            {
                endTimeParameter = new ObjectParameter("EndTime", endTime);
            }
            else
            {
                endTimeParameter = new ObjectParameter("EndTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("Username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("Username", typeof(global::System.String));
            }
    
            ObjectParameter dontLoadGuestCustomersParameter;
            if (dontLoadGuestCustomers.HasValue)
            {
                dontLoadGuestCustomersParameter = new ObjectParameter("DontLoadGuestCustomers", dontLoadGuestCustomers);
            }
            else
            {
                dontLoadGuestCustomersParameter = new ObjectParameter("DontLoadGuestCustomers", typeof(global::System.Boolean));
            }
    
            ObjectParameter dateOfBirthMonthParameter;
            if (dateOfBirthMonth.HasValue)
            {
                dateOfBirthMonthParameter = new ObjectParameter("DateOfBirthMonth", dateOfBirthMonth);
            }
            else
            {
                dateOfBirthMonthParameter = new ObjectParameter("DateOfBirthMonth", typeof(global::System.Int32));
            }
    
            ObjectParameter dateOfBirthDayParameter;
            if (dateOfBirthDay.HasValue)
            {
                dateOfBirthDayParameter = new ObjectParameter("DateOfBirthDay", dateOfBirthDay);
            }
            else
            {
                dateOfBirthDayParameter = new ObjectParameter("DateOfBirthDay", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Customer>("Sp_CustomerLoadAll", mergeOption, startTimeParameter, endTimeParameter, emailParameter, usernameParameter, dontLoadGuestCustomersParameter, dateOfBirthMonthParameter, dateOfBirthDayParameter, pageSizeParameter, pageIndexParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="customerAttributeKey">No Metadata Documentation available.</param>
        public ObjectResult<CustomerReportByAttributeKeyLine> Sp_CustomerReportByAttributeKey(global::System.String customerAttributeKey)
        {
            ObjectParameter customerAttributeKeyParameter;
            if (customerAttributeKey != null)
            {
                customerAttributeKeyParameter = new ObjectParameter("CustomerAttributeKey", customerAttributeKey);
            }
            else
            {
                customerAttributeKeyParameter = new ObjectParameter("CustomerAttributeKey", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<CustomerReportByAttributeKeyLine>("Sp_CustomerReportByAttributeKey", customerAttributeKeyParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<CustomerReportByLanguageLine> Sp_CustomerReportByLanguage()
        {
            return base.ExecuteFunction<CustomerReportByLanguageLine>("Sp_CustomerReportByLanguage");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="olderThan">No Metadata Documentation available.</param>
        public int Sp_CustomerSessionDeleteExpired(Nullable<global::System.DateTime> olderThan)
        {
            ObjectParameter olderThanParameter;
            if (olderThan.HasValue)
            {
                olderThanParameter = new ObjectParameter("OlderThan", olderThan);
            }
            else
            {
                olderThanParameter = new ObjectParameter("OlderThan", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("Sp_CustomerSessionDeleteExpired", olderThanParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="discountID">No Metadata Documentation available.</param>
        /// <param name="customerID">No Metadata Documentation available.</param>
        /// <param name="orderID">No Metadata Documentation available.</param>
        public ObjectResult<DiscountUsageHistory> Sp_DiscountUsageHistoryLoadAll(Nullable<global::System.Int32> discountID, Nullable<global::System.Int32> customerID, Nullable<global::System.Int32> orderID)
        {
            ObjectParameter discountIDParameter;
            if (discountID.HasValue)
            {
                discountIDParameter = new ObjectParameter("DiscountID", discountID);
            }
            else
            {
                discountIDParameter = new ObjectParameter("DiscountID", typeof(global::System.Int32));
            }
    
            ObjectParameter customerIDParameter;
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderIDParameter;
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<DiscountUsageHistory>("Sp_DiscountUsageHistoryLoadAll", discountIDParameter, customerIDParameter, orderIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="discountID">No Metadata Documentation available.</param>
        /// <param name="customerID">No Metadata Documentation available.</param>
        /// <param name="orderID">No Metadata Documentation available.</param>
        public ObjectResult<DiscountUsageHistory> Sp_DiscountUsageHistoryLoadAll(Nullable<global::System.Int32> discountID, Nullable<global::System.Int32> customerID, Nullable<global::System.Int32> orderID, MergeOption mergeOption)
        {
            ObjectParameter discountIDParameter;
            if (discountID.HasValue)
            {
                discountIDParameter = new ObjectParameter("DiscountID", discountID);
            }
            else
            {
                discountIDParameter = new ObjectParameter("DiscountID", typeof(global::System.Int32));
            }
    
            ObjectParameter customerIDParameter;
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderIDParameter;
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<DiscountUsageHistory>("Sp_DiscountUsageHistoryLoadAll", mergeOption, discountIDParameter, customerIDParameter, orderIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="orderID">No Metadata Documentation available.</param>
        /// <param name="customerID">No Metadata Documentation available.</param>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="endTime">No Metadata Documentation available.</param>
        /// <param name="orderStatusID">No Metadata Documentation available.</param>
        /// <param name="paymentStatusID">No Metadata Documentation available.</param>
        /// <param name="shippingStatusID">No Metadata Documentation available.</param>
        /// <param name="isGiftCardActivated">No Metadata Documentation available.</param>
        /// <param name="giftCardCouponCode">No Metadata Documentation available.</param>
        public ObjectResult<GiftCard> Sp_GiftCardLoadAll(Nullable<global::System.Int32> orderID, Nullable<global::System.Int32> customerID, Nullable<global::System.DateTime> startTime, Nullable<global::System.DateTime> endTime, Nullable<global::System.Int32> orderStatusID, Nullable<global::System.Int32> paymentStatusID, Nullable<global::System.Int32> shippingStatusID, Nullable<global::System.Boolean> isGiftCardActivated, global::System.String giftCardCouponCode)
        {
            ObjectParameter orderIDParameter;
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(global::System.Int32));
            }
    
            ObjectParameter customerIDParameter;
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(global::System.Int32));
            }
    
            ObjectParameter startTimeParameter;
            if (startTime.HasValue)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter endTimeParameter;
            if (endTime.HasValue)
            {
                endTimeParameter = new ObjectParameter("EndTime", endTime);
            }
            else
            {
                endTimeParameter = new ObjectParameter("EndTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter orderStatusIDParameter;
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter paymentStatusIDParameter;
            if (paymentStatusID.HasValue)
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", paymentStatusID);
            }
            else
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter shippingStatusIDParameter;
            if (shippingStatusID.HasValue)
            {
                shippingStatusIDParameter = new ObjectParameter("ShippingStatusID", shippingStatusID);
            }
            else
            {
                shippingStatusIDParameter = new ObjectParameter("ShippingStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter isGiftCardActivatedParameter;
            if (isGiftCardActivated.HasValue)
            {
                isGiftCardActivatedParameter = new ObjectParameter("IsGiftCardActivated", isGiftCardActivated);
            }
            else
            {
                isGiftCardActivatedParameter = new ObjectParameter("IsGiftCardActivated", typeof(global::System.Boolean));
            }
    
            ObjectParameter giftCardCouponCodeParameter;
            if (giftCardCouponCode != null)
            {
                giftCardCouponCodeParameter = new ObjectParameter("GiftCardCouponCode", giftCardCouponCode);
            }
            else
            {
                giftCardCouponCodeParameter = new ObjectParameter("GiftCardCouponCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<GiftCard>("Sp_GiftCardLoadAll", orderIDParameter, customerIDParameter, startTimeParameter, endTimeParameter, orderStatusIDParameter, paymentStatusIDParameter, shippingStatusIDParameter, isGiftCardActivatedParameter, giftCardCouponCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="orderID">No Metadata Documentation available.</param>
        /// <param name="customerID">No Metadata Documentation available.</param>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="endTime">No Metadata Documentation available.</param>
        /// <param name="orderStatusID">No Metadata Documentation available.</param>
        /// <param name="paymentStatusID">No Metadata Documentation available.</param>
        /// <param name="shippingStatusID">No Metadata Documentation available.</param>
        /// <param name="isGiftCardActivated">No Metadata Documentation available.</param>
        /// <param name="giftCardCouponCode">No Metadata Documentation available.</param>
        public ObjectResult<GiftCard> Sp_GiftCardLoadAll(Nullable<global::System.Int32> orderID, Nullable<global::System.Int32> customerID, Nullable<global::System.DateTime> startTime, Nullable<global::System.DateTime> endTime, Nullable<global::System.Int32> orderStatusID, Nullable<global::System.Int32> paymentStatusID, Nullable<global::System.Int32> shippingStatusID, Nullable<global::System.Boolean> isGiftCardActivated, global::System.String giftCardCouponCode, MergeOption mergeOption)
        {
            ObjectParameter orderIDParameter;
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(global::System.Int32));
            }
    
            ObjectParameter customerIDParameter;
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(global::System.Int32));
            }
    
            ObjectParameter startTimeParameter;
            if (startTime.HasValue)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter endTimeParameter;
            if (endTime.HasValue)
            {
                endTimeParameter = new ObjectParameter("EndTime", endTime);
            }
            else
            {
                endTimeParameter = new ObjectParameter("EndTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter orderStatusIDParameter;
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter paymentStatusIDParameter;
            if (paymentStatusID.HasValue)
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", paymentStatusID);
            }
            else
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter shippingStatusIDParameter;
            if (shippingStatusID.HasValue)
            {
                shippingStatusIDParameter = new ObjectParameter("ShippingStatusID", shippingStatusID);
            }
            else
            {
                shippingStatusIDParameter = new ObjectParameter("ShippingStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter isGiftCardActivatedParameter;
            if (isGiftCardActivated.HasValue)
            {
                isGiftCardActivatedParameter = new ObjectParameter("IsGiftCardActivated", isGiftCardActivated);
            }
            else
            {
                isGiftCardActivatedParameter = new ObjectParameter("IsGiftCardActivated", typeof(global::System.Boolean));
            }
    
            ObjectParameter giftCardCouponCodeParameter;
            if (giftCardCouponCode != null)
            {
                giftCardCouponCodeParameter = new ObjectParameter("GiftCardCouponCode", giftCardCouponCode);
            }
            else
            {
                giftCardCouponCodeParameter = new ObjectParameter("GiftCardCouponCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<GiftCard>("Sp_GiftCardLoadAll", mergeOption, orderIDParameter, customerIDParameter, startTimeParameter, endTimeParameter, orderStatusIDParameter, paymentStatusIDParameter, shippingStatusIDParameter, isGiftCardActivatedParameter, giftCardCouponCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="giftCardID">No Metadata Documentation available.</param>
        /// <param name="customerID">No Metadata Documentation available.</param>
        /// <param name="orderID">No Metadata Documentation available.</param>
        public ObjectResult<GiftCardUsageHistory> Sp_GiftCardUsageHistoryLoadAll(Nullable<global::System.Int32> giftCardID, Nullable<global::System.Int32> customerID, Nullable<global::System.Int32> orderID)
        {
            ObjectParameter giftCardIDParameter;
            if (giftCardID.HasValue)
            {
                giftCardIDParameter = new ObjectParameter("GiftCardID", giftCardID);
            }
            else
            {
                giftCardIDParameter = new ObjectParameter("GiftCardID", typeof(global::System.Int32));
            }
    
            ObjectParameter customerIDParameter;
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderIDParameter;
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<GiftCardUsageHistory>("Sp_GiftCardUsageHistoryLoadAll", giftCardIDParameter, customerIDParameter, orderIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="giftCardID">No Metadata Documentation available.</param>
        /// <param name="customerID">No Metadata Documentation available.</param>
        /// <param name="orderID">No Metadata Documentation available.</param>
        public ObjectResult<GiftCardUsageHistory> Sp_GiftCardUsageHistoryLoadAll(Nullable<global::System.Int32> giftCardID, Nullable<global::System.Int32> customerID, Nullable<global::System.Int32> orderID, MergeOption mergeOption)
        {
            ObjectParameter giftCardIDParameter;
            if (giftCardID.HasValue)
            {
                giftCardIDParameter = new ObjectParameter("GiftCardID", giftCardID);
            }
            else
            {
                giftCardIDParameter = new ObjectParameter("GiftCardID", typeof(global::System.Int32));
            }
    
            ObjectParameter customerIDParameter;
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderIDParameter;
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<GiftCardUsageHistory>("Sp_GiftCardUsageHistoryLoadAll", mergeOption, giftCardIDParameter, customerIDParameter, orderIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="languageID">No Metadata Documentation available.</param>
        /// <param name="xmlPackage">No Metadata Documentation available.</param>
        public int Sp_LanguagePackExport(Nullable<global::System.Int32> languageID, ObjectParameter xmlPackage)
        {
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("Sp_LanguagePackExport", languageIDParameter, xmlPackage);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="languageID">No Metadata Documentation available.</param>
        /// <param name="xmlPackage">No Metadata Documentation available.</param>
        public int Sp_LanguagePackImport(Nullable<global::System.Int32> languageID, global::System.String xmlPackage)
        {
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            ObjectParameter xmlPackageParameter;
            if (xmlPackage != null)
            {
                xmlPackageParameter = new ObjectParameter("XmlPackage", xmlPackage);
            }
            else
            {
                xmlPackageParameter = new ObjectParameter("XmlPackage", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("Sp_LanguagePackImport", languageIDParameter, xmlPackageParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public int Sp_LogClear()
        {
            return base.ExecuteFunction("Sp_LogClear");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public int Sp_Maintenance_ReindexTables()
        {
            return base.ExecuteFunction("Sp_Maintenance_ReindexTables");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        public ObjectResult<NewsLetterSubscription> Sp_NewsLetterSubscriptionLoadAll(global::System.String email, Nullable<global::System.Boolean> showHidden)
        {
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<NewsLetterSubscription>("Sp_NewsLetterSubscriptionLoadAll", emailParameter, showHiddenParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        public ObjectResult<NewsLetterSubscription> Sp_NewsLetterSubscriptionLoadAll(global::System.String email, Nullable<global::System.Boolean> showHidden, MergeOption mergeOption)
        {
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<NewsLetterSubscription>("Sp_NewsLetterSubscriptionLoadAll", mergeOption, emailParameter, showHiddenParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="languageID">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<News> Sp_NewsLoadAll(Nullable<global::System.Int32> languageID, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords)
        {
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<News>("Sp_NewsLoadAll", languageIDParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="languageID">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<News> Sp_NewsLoadAll(Nullable<global::System.Int32> languageID, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<News>("Sp_NewsLoadAll", mergeOption, languageIDParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="endTime">No Metadata Documentation available.</param>
        /// <param name="orderStatusID">No Metadata Documentation available.</param>
        public ObjectResult<OrderAverageReportLine> Sp_OrderAverageReport(Nullable<global::System.DateTime> startTime, Nullable<global::System.DateTime> endTime, Nullable<global::System.Int32> orderStatusID)
        {
            ObjectParameter startTimeParameter;
            if (startTime.HasValue)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter endTimeParameter;
            if (endTime.HasValue)
            {
                endTimeParameter = new ObjectParameter("EndTime", endTime);
            }
            else
            {
                endTimeParameter = new ObjectParameter("EndTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter orderStatusIDParameter;
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<OrderAverageReportLine>("Sp_OrderAverageReport", startTimeParameter, endTimeParameter, orderStatusIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="orderStatusID">No Metadata Documentation available.</param>
        /// <param name="paymentStatusID">No Metadata Documentation available.</param>
        /// <param name="shippingStatusID">No Metadata Documentation available.</param>
        public ObjectResult<OrderIncompleteReportLine> Sp_OrderIncompleteReport(Nullable<global::System.Int32> orderStatusID, Nullable<global::System.Int32> paymentStatusID, Nullable<global::System.Int32> shippingStatusID)
        {
            ObjectParameter orderStatusIDParameter;
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter paymentStatusIDParameter;
            if (paymentStatusID.HasValue)
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", paymentStatusID);
            }
            else
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter shippingStatusIDParameter;
            if (shippingStatusID.HasValue)
            {
                shippingStatusIDParameter = new ObjectParameter("ShippingStatusID", shippingStatusID);
            }
            else
            {
                shippingStatusIDParameter = new ObjectParameter("ShippingStatusID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<OrderIncompleteReportLine>("Sp_OrderIncompleteReport", orderStatusIDParameter, paymentStatusIDParameter, shippingStatusIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="endTime">No Metadata Documentation available.</param>
        /// <param name="orderStatusID">No Metadata Documentation available.</param>
        /// <param name="paymentStatusID">No Metadata Documentation available.</param>
        /// <param name="billingCountryID">No Metadata Documentation available.</param>
        public ObjectResult<OrderProductVariantReportLine> Sp_OrderProductVariantReport(Nullable<global::System.DateTime> startTime, Nullable<global::System.DateTime> endTime, Nullable<global::System.Int32> orderStatusID, Nullable<global::System.Int32> paymentStatusID, Nullable<global::System.Int32> billingCountryID)
        {
            ObjectParameter startTimeParameter;
            if (startTime.HasValue)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter endTimeParameter;
            if (endTime.HasValue)
            {
                endTimeParameter = new ObjectParameter("EndTime", endTime);
            }
            else
            {
                endTimeParameter = new ObjectParameter("EndTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter orderStatusIDParameter;
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter paymentStatusIDParameter;
            if (paymentStatusID.HasValue)
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", paymentStatusID);
            }
            else
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter billingCountryIDParameter;
            if (billingCountryID.HasValue)
            {
                billingCountryIDParameter = new ObjectParameter("BillingCountryID", billingCountryID);
            }
            else
            {
                billingCountryIDParameter = new ObjectParameter("BillingCountryID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<OrderProductVariantReportLine>("Sp_OrderProductVariantReport", startTimeParameter, endTimeParameter, orderStatusIDParameter, paymentStatusIDParameter, billingCountryIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="filterByCountryID">No Metadata Documentation available.</param>
        public ObjectResult<PaymentMethod> Sp_PaymentMethodLoadAll(Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> filterByCountryID)
        {
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter filterByCountryIDParameter;
            if (filterByCountryID.HasValue)
            {
                filterByCountryIDParameter = new ObjectParameter("FilterByCountryID", filterByCountryID);
            }
            else
            {
                filterByCountryIDParameter = new ObjectParameter("FilterByCountryID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<PaymentMethod>("Sp_PaymentMethodLoadAll", showHiddenParameter, filterByCountryIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="filterByCountryID">No Metadata Documentation available.</param>
        public ObjectResult<PaymentMethod> Sp_PaymentMethodLoadAll(Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> filterByCountryID, MergeOption mergeOption)
        {
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter filterByCountryIDParameter;
            if (filterByCountryID.HasValue)
            {
                filterByCountryIDParameter = new ObjectParameter("FilterByCountryID", filterByCountryID);
            }
            else
            {
                filterByCountryIDParameter = new ObjectParameter("FilterByCountryID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<PaymentMethod>("Sp_PaymentMethodLoadAll", mergeOption, showHiddenParameter, filterByCountryIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<Picture> Sp_PictureLoadAllPaged(Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords)
        {
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Picture>("Sp_PictureLoadAllPaged", pageIndexParameter, pageSizeParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<Picture> Sp_PictureLoadAllPaged(Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Picture>("Sp_PictureLoadAllPaged", mergeOption, pageIndexParameter, pageSizeParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="productID">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<Product> Sp_ProductAlsoPurchasedLoadByProductID(Nullable<global::System.Int32> productID, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords)
        {
            ObjectParameter productIDParameter;
            if (productID.HasValue)
            {
                productIDParameter = new ObjectParameter("ProductID", productID);
            }
            else
            {
                productIDParameter = new ObjectParameter("ProductID", typeof(global::System.Int32));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Product>("Sp_ProductAlsoPurchasedLoadByProductID", productIDParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="productID">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<Product> Sp_ProductAlsoPurchasedLoadByProductID(Nullable<global::System.Int32> productID, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter productIDParameter;
            if (productID.HasValue)
            {
                productIDParameter = new ObjectParameter("ProductID", productID);
            }
            else
            {
                productIDParameter = new ObjectParameter("ProductID", typeof(global::System.Int32));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Product>("Sp_ProductAlsoPurchasedLoadByProductID", mergeOption, productIDParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="categoryID">No Metadata Documentation available.</param>
        /// <param name="manufacturerID">No Metadata Documentation available.</param>
        /// <param name="productTagID">No Metadata Documentation available.</param>
        /// <param name="featuredProducts">No Metadata Documentation available.</param>
        /// <param name="priceMin">No Metadata Documentation available.</param>
        /// <param name="priceMax">No Metadata Documentation available.</param>
        /// <param name="relatedToProductID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="searchDescriptions">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="filteredSpecs">No Metadata Documentation available.</param>
        /// <param name="languageID">No Metadata Documentation available.</param>
        /// <param name="orderBy">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<Product> Sp_ProductLoadAllPaged(Nullable<global::System.Int32> categoryID, Nullable<global::System.Int32> manufacturerID, Nullable<global::System.Int32> productTagID, Nullable<global::System.Boolean> featuredProducts, Nullable<global::System.Decimal> priceMin, Nullable<global::System.Decimal> priceMax, Nullable<global::System.Int32> relatedToProductID, global::System.String keywords, Nullable<global::System.Boolean> searchDescriptions, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, global::System.String filteredSpecs, Nullable<global::System.Int32> languageID, Nullable<global::System.Int32> orderBy, ObjectParameter totalRecords)
        {
            ObjectParameter categoryIDParameter;
            if (categoryID.HasValue)
            {
                categoryIDParameter = new ObjectParameter("CategoryID", categoryID);
            }
            else
            {
                categoryIDParameter = new ObjectParameter("CategoryID", typeof(global::System.Int32));
            }
    
            ObjectParameter manufacturerIDParameter;
            if (manufacturerID.HasValue)
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", manufacturerID);
            }
            else
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", typeof(global::System.Int32));
            }
    
            ObjectParameter productTagIDParameter;
            if (productTagID.HasValue)
            {
                productTagIDParameter = new ObjectParameter("ProductTagID", productTagID);
            }
            else
            {
                productTagIDParameter = new ObjectParameter("ProductTagID", typeof(global::System.Int32));
            }
    
            ObjectParameter featuredProductsParameter;
            if (featuredProducts.HasValue)
            {
                featuredProductsParameter = new ObjectParameter("FeaturedProducts", featuredProducts);
            }
            else
            {
                featuredProductsParameter = new ObjectParameter("FeaturedProducts", typeof(global::System.Boolean));
            }
    
            ObjectParameter priceMinParameter;
            if (priceMin.HasValue)
            {
                priceMinParameter = new ObjectParameter("PriceMin", priceMin);
            }
            else
            {
                priceMinParameter = new ObjectParameter("PriceMin", typeof(global::System.Decimal));
            }
    
            ObjectParameter priceMaxParameter;
            if (priceMax.HasValue)
            {
                priceMaxParameter = new ObjectParameter("PriceMax", priceMax);
            }
            else
            {
                priceMaxParameter = new ObjectParameter("PriceMax", typeof(global::System.Decimal));
            }
    
            ObjectParameter relatedToProductIDParameter;
            if (relatedToProductID.HasValue)
            {
                relatedToProductIDParameter = new ObjectParameter("RelatedToProductID", relatedToProductID);
            }
            else
            {
                relatedToProductIDParameter = new ObjectParameter("RelatedToProductID", typeof(global::System.Int32));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter searchDescriptionsParameter;
            if (searchDescriptions.HasValue)
            {
                searchDescriptionsParameter = new ObjectParameter("SearchDescriptions", searchDescriptions);
            }
            else
            {
                searchDescriptionsParameter = new ObjectParameter("SearchDescriptions", typeof(global::System.Boolean));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter filteredSpecsParameter;
            if (filteredSpecs != null)
            {
                filteredSpecsParameter = new ObjectParameter("FilteredSpecs", filteredSpecs);
            }
            else
            {
                filteredSpecsParameter = new ObjectParameter("FilteredSpecs", typeof(global::System.String));
            }
    
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderByParameter;
            if (orderBy.HasValue)
            {
                orderByParameter = new ObjectParameter("OrderBy", orderBy);
            }
            else
            {
                orderByParameter = new ObjectParameter("OrderBy", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Product>("Sp_ProductLoadAllPaged", categoryIDParameter, manufacturerIDParameter, productTagIDParameter, featuredProductsParameter, priceMinParameter, priceMaxParameter, relatedToProductIDParameter, keywordsParameter, searchDescriptionsParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, filteredSpecsParameter, languageIDParameter, orderByParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="categoryID">No Metadata Documentation available.</param>
        /// <param name="manufacturerID">No Metadata Documentation available.</param>
        /// <param name="productTagID">No Metadata Documentation available.</param>
        /// <param name="featuredProducts">No Metadata Documentation available.</param>
        /// <param name="priceMin">No Metadata Documentation available.</param>
        /// <param name="priceMax">No Metadata Documentation available.</param>
        /// <param name="relatedToProductID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="searchDescriptions">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="filteredSpecs">No Metadata Documentation available.</param>
        /// <param name="languageID">No Metadata Documentation available.</param>
        /// <param name="orderBy">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<Product> Sp_ProductLoadAllPaged(Nullable<global::System.Int32> categoryID, Nullable<global::System.Int32> manufacturerID, Nullable<global::System.Int32> productTagID, Nullable<global::System.Boolean> featuredProducts, Nullable<global::System.Decimal> priceMin, Nullable<global::System.Decimal> priceMax, Nullable<global::System.Int32> relatedToProductID, global::System.String keywords, Nullable<global::System.Boolean> searchDescriptions, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, global::System.String filteredSpecs, Nullable<global::System.Int32> languageID, Nullable<global::System.Int32> orderBy, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter categoryIDParameter;
            if (categoryID.HasValue)
            {
                categoryIDParameter = new ObjectParameter("CategoryID", categoryID);
            }
            else
            {
                categoryIDParameter = new ObjectParameter("CategoryID", typeof(global::System.Int32));
            }
    
            ObjectParameter manufacturerIDParameter;
            if (manufacturerID.HasValue)
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", manufacturerID);
            }
            else
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", typeof(global::System.Int32));
            }
    
            ObjectParameter productTagIDParameter;
            if (productTagID.HasValue)
            {
                productTagIDParameter = new ObjectParameter("ProductTagID", productTagID);
            }
            else
            {
                productTagIDParameter = new ObjectParameter("ProductTagID", typeof(global::System.Int32));
            }
    
            ObjectParameter featuredProductsParameter;
            if (featuredProducts.HasValue)
            {
                featuredProductsParameter = new ObjectParameter("FeaturedProducts", featuredProducts);
            }
            else
            {
                featuredProductsParameter = new ObjectParameter("FeaturedProducts", typeof(global::System.Boolean));
            }
    
            ObjectParameter priceMinParameter;
            if (priceMin.HasValue)
            {
                priceMinParameter = new ObjectParameter("PriceMin", priceMin);
            }
            else
            {
                priceMinParameter = new ObjectParameter("PriceMin", typeof(global::System.Decimal));
            }
    
            ObjectParameter priceMaxParameter;
            if (priceMax.HasValue)
            {
                priceMaxParameter = new ObjectParameter("PriceMax", priceMax);
            }
            else
            {
                priceMaxParameter = new ObjectParameter("PriceMax", typeof(global::System.Decimal));
            }
    
            ObjectParameter relatedToProductIDParameter;
            if (relatedToProductID.HasValue)
            {
                relatedToProductIDParameter = new ObjectParameter("RelatedToProductID", relatedToProductID);
            }
            else
            {
                relatedToProductIDParameter = new ObjectParameter("RelatedToProductID", typeof(global::System.Int32));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter searchDescriptionsParameter;
            if (searchDescriptions.HasValue)
            {
                searchDescriptionsParameter = new ObjectParameter("SearchDescriptions", searchDescriptions);
            }
            else
            {
                searchDescriptionsParameter = new ObjectParameter("SearchDescriptions", typeof(global::System.Boolean));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter filteredSpecsParameter;
            if (filteredSpecs != null)
            {
                filteredSpecsParameter = new ObjectParameter("FilteredSpecs", filteredSpecs);
            }
            else
            {
                filteredSpecsParameter = new ObjectParameter("FilteredSpecs", typeof(global::System.String));
            }
    
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderByParameter;
            if (orderBy.HasValue)
            {
                orderByParameter = new ObjectParameter("OrderBy", orderBy);
            }
            else
            {
                orderByParameter = new ObjectParameter("OrderBy", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Product>("Sp_ProductLoadAllPaged", mergeOption, categoryIDParameter, manufacturerIDParameter, productTagIDParameter, featuredProductsParameter, priceMinParameter, priceMaxParameter, relatedToProductIDParameter, keywordsParameter, searchDescriptionsParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, filteredSpecsParameter, languageIDParameter, orderByParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="productID">No Metadata Documentation available.</param>
        /// <param name="customerID">No Metadata Documentation available.</param>
        /// <param name="rating">No Metadata Documentation available.</param>
        /// <param name="ratedOn">No Metadata Documentation available.</param>
        public int Sp_ProductRatingCreate(Nullable<global::System.Int32> productID, Nullable<global::System.Int32> customerID, Nullable<global::System.Int32> rating, Nullable<global::System.DateTime> ratedOn)
        {
            ObjectParameter productIDParameter;
            if (productID.HasValue)
            {
                productIDParameter = new ObjectParameter("ProductID", productID);
            }
            else
            {
                productIDParameter = new ObjectParameter("ProductID", typeof(global::System.Int32));
            }
    
            ObjectParameter customerIDParameter;
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(global::System.Int32));
            }
    
            ObjectParameter ratingParameter;
            if (rating.HasValue)
            {
                ratingParameter = new ObjectParameter("Rating", rating);
            }
            else
            {
                ratingParameter = new ObjectParameter("Rating", typeof(global::System.Int32));
            }
    
            ObjectParameter ratedOnParameter;
            if (ratedOn.HasValue)
            {
                ratedOnParameter = new ObjectParameter("RatedOn", ratedOn);
            }
            else
            {
                ratedOnParameter = new ObjectParameter("RatedOn", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("Sp_ProductRatingCreate", productIDParameter, customerIDParameter, ratingParameter, ratedOnParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="productTagID">No Metadata Documentation available.</param>
        /// <param name="productID">No Metadata Documentation available.</param>
        public int Sp_ProductTag_Product_MappingDelete(Nullable<global::System.Int32> productTagID, Nullable<global::System.Int32> productID)
        {
            ObjectParameter productTagIDParameter;
            if (productTagID.HasValue)
            {
                productTagIDParameter = new ObjectParameter("ProductTagID", productTagID);
            }
            else
            {
                productTagIDParameter = new ObjectParameter("ProductTagID", typeof(global::System.Int32));
            }
    
            ObjectParameter productIDParameter;
            if (productID.HasValue)
            {
                productIDParameter = new ObjectParameter("ProductID", productID);
            }
            else
            {
                productIDParameter = new ObjectParameter("ProductID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("Sp_ProductTag_Product_MappingDelete", productTagIDParameter, productIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="productTagID">No Metadata Documentation available.</param>
        /// <param name="productID">No Metadata Documentation available.</param>
        public int Sp_ProductTag_Product_MappingInsert(Nullable<global::System.Int32> productTagID, Nullable<global::System.Int32> productID)
        {
            ObjectParameter productTagIDParameter;
            if (productTagID.HasValue)
            {
                productTagIDParameter = new ObjectParameter("ProductTagID", productTagID);
            }
            else
            {
                productTagIDParameter = new ObjectParameter("ProductTagID", typeof(global::System.Int32));
            }
    
            ObjectParameter productIDParameter;
            if (productID.HasValue)
            {
                productIDParameter = new ObjectParameter("ProductID", productID);
            }
            else
            {
                productIDParameter = new ObjectParameter("ProductID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("Sp_ProductTag_Product_MappingInsert", productTagIDParameter, productIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="productID">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        public ObjectResult<ProductTag> Sp_ProductTagLoadAll(Nullable<global::System.Int32> productID, global::System.String name)
        {
            ObjectParameter productIDParameter;
            if (productID.HasValue)
            {
                productIDParameter = new ObjectParameter("ProductID", productID);
            }
            else
            {
                productIDParameter = new ObjectParameter("ProductID", typeof(global::System.Int32));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<ProductTag>("Sp_ProductTagLoadAll", productIDParameter, nameParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="productID">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        public ObjectResult<ProductTag> Sp_ProductTagLoadAll(Nullable<global::System.Int32> productID, global::System.String name, MergeOption mergeOption)
        {
            ObjectParameter productIDParameter;
            if (productID.HasValue)
            {
                productIDParameter = new ObjectParameter("ProductID", productID);
            }
            else
            {
                productIDParameter = new ObjectParameter("ProductID", typeof(global::System.Int32));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<ProductTag>("Sp_ProductTagLoadAll", mergeOption, productIDParameter, nameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="categoryID">No Metadata Documentation available.</param>
        /// <param name="manufacturerID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<ProductVariant> Sp_ProductVariantLoadAll(Nullable<global::System.Int32> categoryID, Nullable<global::System.Int32> manufacturerID, global::System.String keywords, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords)
        {
            ObjectParameter categoryIDParameter;
            if (categoryID.HasValue)
            {
                categoryIDParameter = new ObjectParameter("CategoryID", categoryID);
            }
            else
            {
                categoryIDParameter = new ObjectParameter("CategoryID", typeof(global::System.Int32));
            }
    
            ObjectParameter manufacturerIDParameter;
            if (manufacturerID.HasValue)
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", manufacturerID);
            }
            else
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", typeof(global::System.Int32));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ProductVariant>("Sp_ProductVariantLoadAll", categoryIDParameter, manufacturerIDParameter, keywordsParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="categoryID">No Metadata Documentation available.</param>
        /// <param name="manufacturerID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<ProductVariant> Sp_ProductVariantLoadAll(Nullable<global::System.Int32> categoryID, Nullable<global::System.Int32> manufacturerID, global::System.String keywords, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter categoryIDParameter;
            if (categoryID.HasValue)
            {
                categoryIDParameter = new ObjectParameter("CategoryID", categoryID);
            }
            else
            {
                categoryIDParameter = new ObjectParameter("CategoryID", typeof(global::System.Int32));
            }
    
            ObjectParameter manufacturerIDParameter;
            if (manufacturerID.HasValue)
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", manufacturerID);
            }
            else
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", typeof(global::System.Int32));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ProductVariant>("Sp_ProductVariantLoadAll", mergeOption, categoryIDParameter, manufacturerIDParameter, keywordsParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="recurringPaymentID">No Metadata Documentation available.</param>
        /// <param name="orderID">No Metadata Documentation available.</param>
        public ObjectResult<RecurringPaymentHistory> Sp_RecurringPaymentHistoryLoadAll(Nullable<global::System.Int32> recurringPaymentID, Nullable<global::System.Int32> orderID)
        {
            ObjectParameter recurringPaymentIDParameter;
            if (recurringPaymentID.HasValue)
            {
                recurringPaymentIDParameter = new ObjectParameter("RecurringPaymentID", recurringPaymentID);
            }
            else
            {
                recurringPaymentIDParameter = new ObjectParameter("RecurringPaymentID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderIDParameter;
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RecurringPaymentHistory>("Sp_RecurringPaymentHistoryLoadAll", recurringPaymentIDParameter, orderIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="recurringPaymentID">No Metadata Documentation available.</param>
        /// <param name="orderID">No Metadata Documentation available.</param>
        public ObjectResult<RecurringPaymentHistory> Sp_RecurringPaymentHistoryLoadAll(Nullable<global::System.Int32> recurringPaymentID, Nullable<global::System.Int32> orderID, MergeOption mergeOption)
        {
            ObjectParameter recurringPaymentIDParameter;
            if (recurringPaymentID.HasValue)
            {
                recurringPaymentIDParameter = new ObjectParameter("RecurringPaymentID", recurringPaymentID);
            }
            else
            {
                recurringPaymentIDParameter = new ObjectParameter("RecurringPaymentID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderIDParameter;
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RecurringPaymentHistory>("Sp_RecurringPaymentHistoryLoadAll", mergeOption, recurringPaymentIDParameter, orderIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="customerID">No Metadata Documentation available.</param>
        /// <param name="initialOrderID">No Metadata Documentation available.</param>
        /// <param name="initialOrderStatusID">No Metadata Documentation available.</param>
        public ObjectResult<RecurringPayment> Sp_RecurringPaymentLoadAll(Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> customerID, Nullable<global::System.Int32> initialOrderID, Nullable<global::System.Int32> initialOrderStatusID)
        {
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter customerIDParameter;
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(global::System.Int32));
            }
    
            ObjectParameter initialOrderIDParameter;
            if (initialOrderID.HasValue)
            {
                initialOrderIDParameter = new ObjectParameter("InitialOrderID", initialOrderID);
            }
            else
            {
                initialOrderIDParameter = new ObjectParameter("InitialOrderID", typeof(global::System.Int32));
            }
    
            ObjectParameter initialOrderStatusIDParameter;
            if (initialOrderStatusID.HasValue)
            {
                initialOrderStatusIDParameter = new ObjectParameter("InitialOrderStatusID", initialOrderStatusID);
            }
            else
            {
                initialOrderStatusIDParameter = new ObjectParameter("InitialOrderStatusID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RecurringPayment>("Sp_RecurringPaymentLoadAll", showHiddenParameter, customerIDParameter, initialOrderIDParameter, initialOrderStatusIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="customerID">No Metadata Documentation available.</param>
        /// <param name="initialOrderID">No Metadata Documentation available.</param>
        /// <param name="initialOrderStatusID">No Metadata Documentation available.</param>
        public ObjectResult<RecurringPayment> Sp_RecurringPaymentLoadAll(Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> customerID, Nullable<global::System.Int32> initialOrderID, Nullable<global::System.Int32> initialOrderStatusID, MergeOption mergeOption)
        {
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter customerIDParameter;
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(global::System.Int32));
            }
    
            ObjectParameter initialOrderIDParameter;
            if (initialOrderID.HasValue)
            {
                initialOrderIDParameter = new ObjectParameter("InitialOrderID", initialOrderID);
            }
            else
            {
                initialOrderIDParameter = new ObjectParameter("InitialOrderID", typeof(global::System.Int32));
            }
    
            ObjectParameter initialOrderStatusIDParameter;
            if (initialOrderStatusID.HasValue)
            {
                initialOrderStatusIDParameter = new ObjectParameter("InitialOrderStatusID", initialOrderStatusID);
            }
            else
            {
                initialOrderStatusIDParameter = new ObjectParameter("InitialOrderStatusID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RecurringPayment>("Sp_RecurringPaymentLoadAll", mergeOption, showHiddenParameter, customerIDParameter, initialOrderIDParameter, initialOrderStatusIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="customerID">No Metadata Documentation available.</param>
        /// <param name="orderID">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<RewardPointsHistory> Sp_RewardPointsHistoryLoadAll(Nullable<global::System.Int32> customerID, Nullable<global::System.Int32> orderID, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords)
        {
            ObjectParameter customerIDParameter;
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderIDParameter;
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(global::System.Int32));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RewardPointsHistory>("Sp_RewardPointsHistoryLoadAll", customerIDParameter, orderIDParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="customerID">No Metadata Documentation available.</param>
        /// <param name="orderID">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<RewardPointsHistory> Sp_RewardPointsHistoryLoadAll(Nullable<global::System.Int32> customerID, Nullable<global::System.Int32> orderID, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter customerIDParameter;
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderIDParameter;
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(global::System.Int32));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RewardPointsHistory>("Sp_RewardPointsHistoryLoadAll", mergeOption, customerIDParameter, orderIDParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="lastDays">No Metadata Documentation available.</param>
        /// <param name="recordsToReturn">No Metadata Documentation available.</param>
        /// <param name="orderBy">No Metadata Documentation available.</param>
        public ObjectResult<BestSellersReportLine> Sp_SalesBestSellersReport(Nullable<global::System.Int32> lastDays, Nullable<global::System.Int32> recordsToReturn, Nullable<global::System.Int32> orderBy)
        {
            ObjectParameter lastDaysParameter;
            if (lastDays.HasValue)
            {
                lastDaysParameter = new ObjectParameter("LastDays", lastDays);
            }
            else
            {
                lastDaysParameter = new ObjectParameter("LastDays", typeof(global::System.Int32));
            }
    
            ObjectParameter recordsToReturnParameter;
            if (recordsToReturn.HasValue)
            {
                recordsToReturnParameter = new ObjectParameter("RecordsToReturn", recordsToReturn);
            }
            else
            {
                recordsToReturnParameter = new ObjectParameter("RecordsToReturn", typeof(global::System.Int32));
            }
    
            ObjectParameter orderByParameter;
            if (orderBy.HasValue)
            {
                orderByParameter = new ObjectParameter("OrderBy", orderBy);
            }
            else
            {
                orderByParameter = new ObjectParameter("OrderBy", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<BestSellersReportLine>("Sp_SalesBestSellersReport", lastDaysParameter, recordsToReturnParameter, orderByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public int Sp_SearchLogClear()
        {
            return base.ExecuteFunction("Sp_SearchLogClear");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="endTime">No Metadata Documentation available.</param>
        /// <param name="count">No Metadata Documentation available.</param>
        public ObjectResult<SearchTermReportLine> Sp_SearchTermReport(Nullable<global::System.DateTime> startTime, Nullable<global::System.DateTime> endTime, Nullable<global::System.Int32> count)
        {
            ObjectParameter startTimeParameter;
            if (startTime.HasValue)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter endTimeParameter;
            if (endTime.HasValue)
            {
                endTimeParameter = new ObjectParameter("EndTime", endTime);
            }
            else
            {
                endTimeParameter = new ObjectParameter("EndTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter countParameter;
            if (count.HasValue)
            {
                countParameter = new ObjectParameter("Count", count);
            }
            else
            {
                countParameter = new ObjectParameter("Count", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<SearchTermReportLine>("Sp_SearchTermReport", startTimeParameter, endTimeParameter, countParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="filterByCountryID">No Metadata Documentation available.</param>
        public ObjectResult<ShippingMethod> Sp_ShippingMethodLoadAll(Nullable<global::System.Int32> filterByCountryID)
        {
            ObjectParameter filterByCountryIDParameter;
            if (filterByCountryID.HasValue)
            {
                filterByCountryIDParameter = new ObjectParameter("FilterByCountryID", filterByCountryID);
            }
            else
            {
                filterByCountryIDParameter = new ObjectParameter("FilterByCountryID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ShippingMethod>("Sp_ShippingMethodLoadAll", filterByCountryIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="filterByCountryID">No Metadata Documentation available.</param>
        public ObjectResult<ShippingMethod> Sp_ShippingMethodLoadAll(Nullable<global::System.Int32> filterByCountryID, MergeOption mergeOption)
        {
            ObjectParameter filterByCountryIDParameter;
            if (filterByCountryID.HasValue)
            {
                filterByCountryIDParameter = new ObjectParameter("FilterByCountryID", filterByCountryID);
            }
            else
            {
                filterByCountryIDParameter = new ObjectParameter("FilterByCountryID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ShippingMethod>("Sp_ShippingMethodLoadAll", mergeOption, filterByCountryIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="categoryID">No Metadata Documentation available.</param>
        /// <param name="languageID">No Metadata Documentation available.</param>
        public ObjectResult<SpecificationAttributeOptionFilter> Sp_SpecificationAttributeOptionFilter_LoadByFilter(Nullable<global::System.Int32> categoryID, Nullable<global::System.Int32> languageID)
        {
            ObjectParameter categoryIDParameter;
            if (categoryID.HasValue)
            {
                categoryIDParameter = new ObjectParameter("CategoryID", categoryID);
            }
            else
            {
                categoryIDParameter = new ObjectParameter("CategoryID", typeof(global::System.Int32));
            }
    
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<SpecificationAttributeOptionFilter>("Sp_SpecificationAttributeOptionFilter_LoadByFilter", categoryIDParameter, languageIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<TaxRate> Sp_TaxRateLoadAll()
        {
            return base.ExecuteFunction<TaxRate>("Sp_TaxRateLoadAll");
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        public ObjectResult<TaxRate> Sp_TaxRateLoadAll(MergeOption mergeOption)
        {
            return base.ExecuteFunction<TaxRate>("Sp_TaxRateLoadAll", mergeOption);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="forumID">No Metadata Documentation available.</param>
        public int Sp_Forums_ForumDelete(Nullable<global::System.Int32> forumID)
        {
            ObjectParameter forumIDParameter;
            if (forumID.HasValue)
            {
                forumIDParameter = new ObjectParameter("ForumID", forumID);
            }
            else
            {
                forumIDParameter = new ObjectParameter("ForumID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("Sp_Forums_ForumDelete", forumIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="forumID">No Metadata Documentation available.</param>
        public int Sp_Forums_ForumUpdateCounts(Nullable<global::System.Int32> forumID)
        {
            ObjectParameter forumIDParameter;
            if (forumID.HasValue)
            {
                forumIDParameter = new ObjectParameter("ForumID", forumID);
            }
            else
            {
                forumIDParameter = new ObjectParameter("ForumID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("Sp_Forums_ForumUpdateCounts", forumIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="fromUserID">No Metadata Documentation available.</param>
        /// <param name="toUserID">No Metadata Documentation available.</param>
        /// <param name="isRead">No Metadata Documentation available.</param>
        /// <param name="isDeletedByAuthor">No Metadata Documentation available.</param>
        /// <param name="isDeletedByRecipient">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<PrivateMessage> Sp_Forums_PrivateMessageLoadAll(Nullable<global::System.Int32> fromUserID, Nullable<global::System.Int32> toUserID, Nullable<global::System.Boolean> isRead, Nullable<global::System.Boolean> isDeletedByAuthor, Nullable<global::System.Boolean> isDeletedByRecipient, global::System.String keywords, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords)
        {
            ObjectParameter fromUserIDParameter;
            if (fromUserID.HasValue)
            {
                fromUserIDParameter = new ObjectParameter("FromUserID", fromUserID);
            }
            else
            {
                fromUserIDParameter = new ObjectParameter("FromUserID", typeof(global::System.Int32));
            }
    
            ObjectParameter toUserIDParameter;
            if (toUserID.HasValue)
            {
                toUserIDParameter = new ObjectParameter("ToUserID", toUserID);
            }
            else
            {
                toUserIDParameter = new ObjectParameter("ToUserID", typeof(global::System.Int32));
            }
    
            ObjectParameter isReadParameter;
            if (isRead.HasValue)
            {
                isReadParameter = new ObjectParameter("IsRead", isRead);
            }
            else
            {
                isReadParameter = new ObjectParameter("IsRead", typeof(global::System.Boolean));
            }
    
            ObjectParameter isDeletedByAuthorParameter;
            if (isDeletedByAuthor.HasValue)
            {
                isDeletedByAuthorParameter = new ObjectParameter("IsDeletedByAuthor", isDeletedByAuthor);
            }
            else
            {
                isDeletedByAuthorParameter = new ObjectParameter("IsDeletedByAuthor", typeof(global::System.Boolean));
            }
    
            ObjectParameter isDeletedByRecipientParameter;
            if (isDeletedByRecipient.HasValue)
            {
                isDeletedByRecipientParameter = new ObjectParameter("IsDeletedByRecipient", isDeletedByRecipient);
            }
            else
            {
                isDeletedByRecipientParameter = new ObjectParameter("IsDeletedByRecipient", typeof(global::System.Boolean));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<PrivateMessage>("Sp_Forums_PrivateMessageLoadAll", fromUserIDParameter, toUserIDParameter, isReadParameter, isDeletedByAuthorParameter, isDeletedByRecipientParameter, keywordsParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="fromUserID">No Metadata Documentation available.</param>
        /// <param name="toUserID">No Metadata Documentation available.</param>
        /// <param name="isRead">No Metadata Documentation available.</param>
        /// <param name="isDeletedByAuthor">No Metadata Documentation available.</param>
        /// <param name="isDeletedByRecipient">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<PrivateMessage> Sp_Forums_PrivateMessageLoadAll(Nullable<global::System.Int32> fromUserID, Nullable<global::System.Int32> toUserID, Nullable<global::System.Boolean> isRead, Nullable<global::System.Boolean> isDeletedByAuthor, Nullable<global::System.Boolean> isDeletedByRecipient, global::System.String keywords, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter fromUserIDParameter;
            if (fromUserID.HasValue)
            {
                fromUserIDParameter = new ObjectParameter("FromUserID", fromUserID);
            }
            else
            {
                fromUserIDParameter = new ObjectParameter("FromUserID", typeof(global::System.Int32));
            }
    
            ObjectParameter toUserIDParameter;
            if (toUserID.HasValue)
            {
                toUserIDParameter = new ObjectParameter("ToUserID", toUserID);
            }
            else
            {
                toUserIDParameter = new ObjectParameter("ToUserID", typeof(global::System.Int32));
            }
    
            ObjectParameter isReadParameter;
            if (isRead.HasValue)
            {
                isReadParameter = new ObjectParameter("IsRead", isRead);
            }
            else
            {
                isReadParameter = new ObjectParameter("IsRead", typeof(global::System.Boolean));
            }
    
            ObjectParameter isDeletedByAuthorParameter;
            if (isDeletedByAuthor.HasValue)
            {
                isDeletedByAuthorParameter = new ObjectParameter("IsDeletedByAuthor", isDeletedByAuthor);
            }
            else
            {
                isDeletedByAuthorParameter = new ObjectParameter("IsDeletedByAuthor", typeof(global::System.Boolean));
            }
    
            ObjectParameter isDeletedByRecipientParameter;
            if (isDeletedByRecipient.HasValue)
            {
                isDeletedByRecipientParameter = new ObjectParameter("IsDeletedByRecipient", isDeletedByRecipient);
            }
            else
            {
                isDeletedByRecipientParameter = new ObjectParameter("IsDeletedByRecipient", typeof(global::System.Boolean));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<PrivateMessage>("Sp_Forums_PrivateMessageLoadAll", mergeOption, fromUserIDParameter, toUserIDParameter, isReadParameter, isDeletedByAuthorParameter, isDeletedByRecipientParameter, keywordsParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userID">No Metadata Documentation available.</param>
        /// <param name="forumID">No Metadata Documentation available.</param>
        /// <param name="topicID">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<ForumSubscription> Sp_Forums_SubscriptionLoadAll(Nullable<global::System.Int32> userID, Nullable<global::System.Int32> forumID, Nullable<global::System.Int32> topicID, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords)
        {
            ObjectParameter userIDParameter;
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(global::System.Int32));
            }
    
            ObjectParameter forumIDParameter;
            if (forumID.HasValue)
            {
                forumIDParameter = new ObjectParameter("ForumID", forumID);
            }
            else
            {
                forumIDParameter = new ObjectParameter("ForumID", typeof(global::System.Int32));
            }
    
            ObjectParameter topicIDParameter;
            if (topicID.HasValue)
            {
                topicIDParameter = new ObjectParameter("TopicID", topicID);
            }
            else
            {
                topicIDParameter = new ObjectParameter("TopicID", typeof(global::System.Int32));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ForumSubscription>("Sp_Forums_SubscriptionLoadAll", userIDParameter, forumIDParameter, topicIDParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userID">No Metadata Documentation available.</param>
        /// <param name="forumID">No Metadata Documentation available.</param>
        /// <param name="topicID">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<ForumSubscription> Sp_Forums_SubscriptionLoadAll(Nullable<global::System.Int32> userID, Nullable<global::System.Int32> forumID, Nullable<global::System.Int32> topicID, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter userIDParameter;
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(global::System.Int32));
            }
    
            ObjectParameter forumIDParameter;
            if (forumID.HasValue)
            {
                forumIDParameter = new ObjectParameter("ForumID", forumID);
            }
            else
            {
                forumIDParameter = new ObjectParameter("ForumID", typeof(global::System.Int32));
            }
    
            ObjectParameter topicIDParameter;
            if (topicID.HasValue)
            {
                topicIDParameter = new ObjectParameter("TopicID", topicID);
            }
            else
            {
                topicIDParameter = new ObjectParameter("TopicID", typeof(global::System.Int32));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ForumSubscription>("Sp_Forums_SubscriptionLoadAll", mergeOption, userIDParameter, forumIDParameter, topicIDParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="topicID">No Metadata Documentation available.</param>
        /// <param name="userID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="ascSort">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<ForumPost> Sp_Forums_PostLoadAll(Nullable<global::System.Int32> topicID, Nullable<global::System.Int32> userID, global::System.String keywords, Nullable<global::System.Boolean> ascSort, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords)
        {
            ObjectParameter topicIDParameter;
            if (topicID.HasValue)
            {
                topicIDParameter = new ObjectParameter("TopicID", topicID);
            }
            else
            {
                topicIDParameter = new ObjectParameter("TopicID", typeof(global::System.Int32));
            }
    
            ObjectParameter userIDParameter;
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(global::System.Int32));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter ascSortParameter;
            if (ascSort.HasValue)
            {
                ascSortParameter = new ObjectParameter("AscSort", ascSort);
            }
            else
            {
                ascSortParameter = new ObjectParameter("AscSort", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ForumPost>("Sp_Forums_PostLoadAll", topicIDParameter, userIDParameter, keywordsParameter, ascSortParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="topicID">No Metadata Documentation available.</param>
        /// <param name="userID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="ascSort">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<ForumPost> Sp_Forums_PostLoadAll(Nullable<global::System.Int32> topicID, Nullable<global::System.Int32> userID, global::System.String keywords, Nullable<global::System.Boolean> ascSort, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter topicIDParameter;
            if (topicID.HasValue)
            {
                topicIDParameter = new ObjectParameter("TopicID", topicID);
            }
            else
            {
                topicIDParameter = new ObjectParameter("TopicID", typeof(global::System.Int32));
            }
    
            ObjectParameter userIDParameter;
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(global::System.Int32));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter ascSortParameter;
            if (ascSort.HasValue)
            {
                ascSortParameter = new ObjectParameter("AscSort", ascSort);
            }
            else
            {
                ascSortParameter = new ObjectParameter("AscSort", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ForumPost>("Sp_Forums_PostLoadAll", mergeOption, topicIDParameter, userIDParameter, keywordsParameter, ascSortParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="forumID">No Metadata Documentation available.</param>
        /// <param name="userID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="searchType">No Metadata Documentation available.</param>
        /// <param name="limitDate">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<ForumTopic> Sp_Forums_TopicLoadAll(Nullable<global::System.Int32> forumID, Nullable<global::System.Int32> userID, global::System.String keywords, Nullable<global::System.Int32> searchType, Nullable<global::System.DateTime> limitDate, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords)
        {
            ObjectParameter forumIDParameter;
            if (forumID.HasValue)
            {
                forumIDParameter = new ObjectParameter("ForumID", forumID);
            }
            else
            {
                forumIDParameter = new ObjectParameter("ForumID", typeof(global::System.Int32));
            }
    
            ObjectParameter userIDParameter;
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(global::System.Int32));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter searchTypeParameter;
            if (searchType.HasValue)
            {
                searchTypeParameter = new ObjectParameter("SearchType", searchType);
            }
            else
            {
                searchTypeParameter = new ObjectParameter("SearchType", typeof(global::System.Int32));
            }
    
            ObjectParameter limitDateParameter;
            if (limitDate.HasValue)
            {
                limitDateParameter = new ObjectParameter("LimitDate", limitDate);
            }
            else
            {
                limitDateParameter = new ObjectParameter("LimitDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ForumTopic>("Sp_Forums_TopicLoadAll", forumIDParameter, userIDParameter, keywordsParameter, searchTypeParameter, limitDateParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="forumID">No Metadata Documentation available.</param>
        /// <param name="userID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="searchType">No Metadata Documentation available.</param>
        /// <param name="limitDate">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<ForumTopic> Sp_Forums_TopicLoadAll(Nullable<global::System.Int32> forumID, Nullable<global::System.Int32> userID, global::System.String keywords, Nullable<global::System.Int32> searchType, Nullable<global::System.DateTime> limitDate, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter forumIDParameter;
            if (forumID.HasValue)
            {
                forumIDParameter = new ObjectParameter("ForumID", forumID);
            }
            else
            {
                forumIDParameter = new ObjectParameter("ForumID", typeof(global::System.Int32));
            }
    
            ObjectParameter userIDParameter;
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(global::System.Int32));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter searchTypeParameter;
            if (searchType.HasValue)
            {
                searchTypeParameter = new ObjectParameter("SearchType", searchType);
            }
            else
            {
                searchTypeParameter = new ObjectParameter("SearchType", typeof(global::System.Int32));
            }
    
            ObjectParameter limitDateParameter;
            if (limitDate.HasValue)
            {
                limitDateParameter = new ObjectParameter("LimitDate", limitDate);
            }
            else
            {
                limitDateParameter = new ObjectParameter("LimitDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ForumTopic>("Sp_Forums_TopicLoadAll", mergeOption, forumIDParameter, userIDParameter, keywordsParameter, searchTypeParameter, limitDateParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="forumID">No Metadata Documentation available.</param>
        /// <param name="topicCount">No Metadata Documentation available.</param>
        public ObjectResult<ForumTopic> Sp_Forums_TopicLoadActive(Nullable<global::System.Int32> forumID, Nullable<global::System.Int32> topicCount)
        {
            ObjectParameter forumIDParameter;
            if (forumID.HasValue)
            {
                forumIDParameter = new ObjectParameter("ForumID", forumID);
            }
            else
            {
                forumIDParameter = new ObjectParameter("ForumID", typeof(global::System.Int32));
            }
    
            ObjectParameter topicCountParameter;
            if (topicCount.HasValue)
            {
                topicCountParameter = new ObjectParameter("TopicCount", topicCount);
            }
            else
            {
                topicCountParameter = new ObjectParameter("TopicCount", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ForumTopic>("Sp_Forums_TopicLoadActive", forumIDParameter, topicCountParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="forumID">No Metadata Documentation available.</param>
        /// <param name="topicCount">No Metadata Documentation available.</param>
        public ObjectResult<ForumTopic> Sp_Forums_TopicLoadActive(Nullable<global::System.Int32> forumID, Nullable<global::System.Int32> topicCount, MergeOption mergeOption)
        {
            ObjectParameter forumIDParameter;
            if (forumID.HasValue)
            {
                forumIDParameter = new ObjectParameter("ForumID", forumID);
            }
            else
            {
                forumIDParameter = new ObjectParameter("ForumID", typeof(global::System.Int32));
            }
    
            ObjectParameter topicCountParameter;
            if (topicCount.HasValue)
            {
                topicCountParameter = new ObjectParameter("TopicCount", topicCount);
            }
            else
            {
                topicCountParameter = new ObjectParameter("TopicCount", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ForumTopic>("Sp_Forums_TopicLoadActive", mergeOption, forumIDParameter, topicCountParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="olderThan">No Metadata Documentation available.</param>
        public int Sp_ShoppingCartItemDeleteExpired(Nullable<global::System.DateTime> olderThan)
        {
            ObjectParameter olderThanParameter;
            if (olderThan.HasValue)
            {
                olderThanParameter = new ObjectParameter("OlderThan", olderThan);
            }
            else
            {
                olderThanParameter = new ObjectParameter("OlderThan", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("Sp_ShoppingCartItemDeleteExpired", olderThanParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<CustomerSession> Sp_CustomerSessionLoadNonEmpty()
        {
            return base.ExecuteFunction<CustomerSession>("Sp_CustomerSessionLoadNonEmpty");
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        public ObjectResult<CustomerSession> Sp_CustomerSessionLoadNonEmpty(MergeOption mergeOption)
        {
            return base.ExecuteFunction<CustomerSession>("Sp_CustomerSessionLoadNonEmpty", mergeOption);
        }

        #endregion
    }
    

    #endregion
    
    
}
