@model IList<ProductDetailsModel.ProductVariantModel.ProductVariantAttributeModel>
@using Nop.Web.Models.Catalog;
@using Nop.Core.Domain.Catalog;
@using Nop.Core.Infrastructure;
@using Nop.Core;
@using System.Text;
@using System.Globalization;
@using Nop.Services.Customers;
@using Nop.Services.Security;
@{
    var hidePrices = !EngineContext.Current.Resolve<IPermissionService>().Authorize(StandardPermissionProvider.DisplayPrices);
}
@if (Model.Count > 0)
{
    <div class="attributes">
        <dl>
            @foreach (var attribute in Model)
            {
                string controlId = string.Format("product_attribute_{0}_{1}_{2}", attribute.ProductVariantId, attribute.ProductAttributeId, attribute.Id);
                string textPrompt = !string.IsNullOrEmpty(attribute.TextPrompt) ? attribute.TextPrompt : attribute.Name;
                <div>
                    <dt><span class="text-prompt">
                        @textPrompt
                    </span>
                        @if (attribute.IsRequired)
                        {
                            <span class="required">*</span>
                        }
                        @if (!string.IsNullOrEmpty(attribute.Description))
                        {
                            <div class="attribute-description">
                                @Html.Raw(attribute.Description)
                            </div>
                        }
                    </dt>
                    <dd>
                        @switch (attribute.AttributeControlType)
                        {
                            case AttributeControlType.DropdownList:
                                {
                            <select name="@(controlId)" id="@(controlId)">
                                @if (!attribute.IsRequired)
                                {
                                    <option value="0">---</option>
                                }
                                @foreach (var pvaValue in attribute.Values)
                                {
                                    <option @(pvaValue.IsPreSelected ? Html.Raw(" selected=\"selected\"") : null) value="@pvaValue.Id">@pvaValue.Name
                                        @(!String.IsNullOrEmpty(pvaValue.PriceAdjustment) ? " [" + pvaValue.PriceAdjustment + "]" : null)
                                    </option>
                                }
                            </select>
                                }
                                break;
                            case AttributeControlType.RadioList:
                                {
                            <ul class="option-list">
                                @foreach (var pvaValue in attribute.Values)
                                {
                                    <li>
                                        <input id="@(controlId)_@(pvaValue.Id)" type="radio" name="@(controlId)" value="@pvaValue.Id" @(pvaValue.IsPreSelected ? Html.Raw(" checked=\"checked\"") : null) />
                                        <label for="@(controlId)_@(pvaValue.Id)">@pvaValue.Name @(!String.IsNullOrEmpty(pvaValue.PriceAdjustment) ? " [" + pvaValue.PriceAdjustment + "]" : null)</label>
                                    </li>
                                }
                            </ul>
                                }
                                break;
                            case AttributeControlType.Checkboxes:
                                {
                            <ul class="option-list">
                                @foreach (var pvaValue in attribute.Values)
                                {
                                    <li>
                                        <input id="@(controlId)_@(pvaValue.Id)" type="checkbox" name="@(controlId)" value="@pvaValue.Id" @(pvaValue.IsPreSelected ? Html.Raw(" checked=\"checked\"") : null) />
                                        <label for="@(controlId)_@(pvaValue.Id)">@pvaValue.Name @(!String.IsNullOrEmpty(pvaValue.PriceAdjustment) ? " [" + pvaValue.PriceAdjustment + "]" : null)</label>
                                    </li>
                                }
                            </ul>
                                }
                                break;
                            case AttributeControlType.TextBox:
                                {
                            <input name="@(controlId)" type="text" class="textbox" id="@(controlId)" value="@attribute.TextValue" />
                                }
                                break;
                            case AttributeControlType.MultilineTextbox:
                                {
                            <textarea id="@(controlId)" name="@(controlId)">@attribute.TextValue</textarea>
                                }
                                break;
                            case AttributeControlType.Datepicker:
                                {
                            @Html.DatePickerDropDowns(controlId + "_day", controlId + "_month", controlId + "_year", DateTime.Now.Year, DateTime.Now.Year + 1, attribute.SelectedDay, attribute.SelectedMonth, attribute.SelectedYear)
                                }
                                break;
                            case AttributeControlType.FileUpload:
                                {
                            <input type="file" id="@(controlId)" name="@(controlId)"></input>
                                }
                                break;
                        }
                    </dd>
                </div>
            
            }
        </dl>
    </div>
}