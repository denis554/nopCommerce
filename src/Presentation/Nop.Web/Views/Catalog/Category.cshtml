@model Nop.Web.Models.Catalog.CategoryModel
@{
    Layout = "~/Views/Shared/_ColumnsThree.cshtml";
}
@using MvcContrib.UI.Pager;
@using MvcContrib.Pagination;
@using Nop.Core;
@using Nop.Core.Infrastructure;
@using Nop.Web.Framework.UI;
@using Nop.Web.Models.Catalog;
@{
    var storeUrl = EngineContext.Current.Resolve<IWebHelper>().GetStoreLocation();
}
<div class="category-page">

    @*category breadcrumb*@
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <div class="breadcrumb">
            <a href='@storeUrl'>@T("Categories.Breadcrumb.Top")</a> /
            @for (int i = 0; i < Model.CategoryBreadcrumb.Count; i++)
            {
                var catBr = Model.CategoryBreadcrumb[i];
                <a href="@Url.RouteUrl("Category", new { categoryId = catBr.Id, SeName = catBr.SeName })">@catBr.Name</a>
                                                                                                     if (i != Model.CategoryBreadcrumb.Count - 1)
                                                                                                     {
                    <text>/</text>
                                                                                                     }
            }
            <br />
        </div>
        <div class="clear">
        </div>
    }
    


    @*description*@
    <div class="category-description">
        @Html.Raw(Model.Description)
    </div>
    <div class="clear">
    </div>


    
    @*subcategories*@
    @if (Model.SubCategories.Count > 0)
    {
        <div class="sub-category-grid">
            @(Html.DataList<CategoryModel.SubCategoryModel>(Model.SubCategories, 3,
                @<div class="item-box">
                    <div class="sub-category-item">
                        <h2 class="category-title">
                            <a href="@Url.RouteUrl("Category", new { categoryId = item.Id, item.SeName })" title="Show products in category @item.Name">
                                @item.Name</a>
                        </h2>
                        <div class="picture">
                            <a href="@Url.RouteUrl("Category", new { categoryId = item.Id, item.SeName })" title="Show products in category @item.Name">
                                <img style="border-width: 0px;" alt="Picture for category @item.Name" src="@item.ImageUrl"
                                    title="Show products in category @item.Name" /></a>
                        </div>
                    </div>
                </div>
            ))
        </div>
        <div class="clear">
        </div>
    }


    
    @*featured products*@
    @if (Model.FeaturedProducts.Count > 0)
    {
        <div class="featured-product-grid">
            <div class="title">
                @T("Products.FeaturedProducts")
            </div>
            <div>
                @(Html.DataList<ProductModel>(Model.FeaturedProducts, 2,
                    @<div class="item-box">
                        @Html.Partial("_ProductBox", @item)
                    </div>
                ))
            </div>
        </div>
        <div class="clear">
        </div>
    }
    
    
    
    
    @*view mode*@
    @if (Model.AllowProductViewModeChanging && Model.Products.Count > 0)
    {
        <div class="product-viewmode">
            @Html.LabelFor(model => model.PagingFilteringContext.ViewMode)
            @Html.DropDownList("products-viewmode", Model.AvailableViewModes, new { onchange = "setLocation(this.value);" })
        </div>
    }   
    
    
    @*sorting*@
    @if (Model.AllowProductFiltering && Model.Products.Count > 0)
    {
        <div class="product-sorting">
            @Html.LabelFor(model => model.PagingFilteringContext.OrderBy)
            @Html.DropDownList("products-orderby", Model.AvailableSortOptions, new { onchange = "setLocation(this.value);" })
        </div>
    }
    <div class="clear">
    </div>
    
    @*filtering*@
    @*UNDONE implement filter by price & attributes*@

    @*product list*@
    @if (Model.Products.Count > 0)
    {
        if (Model.PagingFilteringContext.ViewMode == "list")
        {
            @*list mode*@
            <div class="product-list1">
            @foreach (var product in Model.Products)
            {
                <div class="item-box">
                    @Html.Partial("_ProductBox", product)
                </div>
            }
            </div>
            <div class="clear">
            </div>        
        }
        else
        {
            @*grid mode*@
            <div class="product-grid">
                @(Html.DataList<ProductModel>(Model.Products, 2,
                    @<div class="item-box">
                        @Html.Partial("_ProductBox", @item)
                    </div>
                ))
            </div>
        }
    }
    
    
    @*UNDONE allow customer to select page size*@
    @*pager*@
    @MvcHtmlString.Create(Html.Pager(Model.PagingFilteringContext as MvcContrib.Pagination.IPagination).QueryParam("pageNumber").ToString())
</div>
