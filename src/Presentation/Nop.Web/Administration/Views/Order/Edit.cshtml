@model OrderModel
@using Telerik.Web.Mvc.UI;
@{
    //page title
    ViewBag.Title = T("Admin.Orders.EditOrderDetails").Text;
}
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "order-form" }))
{
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-sales.png")" alt="" />
            @T("Admin.Orders.EditOrderDetails") - @Model.Id @Html.ActionLink("(" + T("Admin.Orders.BackToList") + ")", "List")
        </div>
        <div class="options">
            @if (Model.DisplayPdfInvoice && !Model.IsLoggedInAsVendor)
            {
                <a href="@Url.Action("PdfInvoice", new { orderId = Model.Id })" class="t-button">@T("Admin.Orders.PdfInvoice")</a>
            }
            @if (!Model.IsLoggedInAsVendor)
            {
                <span id="order-delete" class="t-button">@T("Admin.Common.Delete")</span>
            }
            <input type="submit" id="btnRefreshPage" name="btnRefreshPage" style="display: none" />
            <script type="text/javascript">
                $(document).ready(function () {
                    $('#btnRefreshPage').click(function () {
                        //refresh page
                        location.reload();
                    });
                });
            </script>
        </div>
    </div>
    
    @Html.ValidationSummary(false)

    @Html.Telerik().TabStrip().Name("order-edit").Items(x =>
{
    var tabInfo = x.Add().Text(T("Admin.Orders.Info").Text).Content(TabInfo().ToHtmlString());
    var tabBillingInfo = x.Add().Text(T("Admin.Orders.BillingInfo").Text).Content(TabBillingInfo().ToHtmlString());
    var tabShippingInfo = x.Add().Text(T("Admin.Orders.ShippingInfo").Text).Content(TabShippingInfo().ToHtmlString());
    var tabProducts = x.Add().Text(T("Admin.Orders.Products").Text).Content(TabProducts().ToHtmlString());
    TabStripItemBuilder tabOrderNotes = null;
    if (!Model.IsLoggedInAsVendor)
    {
        tabOrderNotes = x.Add().Text(T("Admin.Orders.OrderNotes").Text).Content(TabOrderNotes().ToHtmlString());
    }

    var selectedTab = (string)ViewData["selectedTab"];
    switch (selectedTab)
    {
        case "info":
            tabInfo.Selected(true);
            break;
        case "billinginfo":
            tabBillingInfo.Selected(true);
            break;
        case "shippinginfo":
            tabShippingInfo.Selected(true);
            break;
        case "products":
            tabProducts.Selected(true);
            break;
        case "ordernotes":
            if (tabOrderNotes != null)
            {
                tabOrderNotes.Selected(true);
            }
            break;
        default:
            tabInfo.Selected(true);
            break;
    }

    //generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new AdminTabStripCreated(x, "order-edit"));
})


}
@Html.DeleteConfirmation("order-delete")
@helper TabInfo()
{
    @Html.Partial("_OrderDetails.Info", Model)
}
@helper TabBillingInfo()
{
    @Html.Partial("_OrderDetails.Billing", Model)
}
@helper TabShippingInfo()
{
    @Html.Partial("_OrderDetails.Shipping", Model)
}
@helper TabProducts()
{
    @Html.Partial("_OrderDetails.Products", Model)
}
@helper TabOrderNotes()
{
    @Html.Partial("_OrderDetails.Notes", Model)
}
