@model ProductModel

@using Nop.Core.Domain.Catalog
@using Nop.Services.Catalog
@using Telerik.Web.Mvc.UI;
@if (Model.Id > 0)
{
    if (Model.NumberOfAvailableProductAttributes > 0)
    {
        @Html.Telerik().TabStrip().Name("productvariantattribute-edit").Items(x =>
        {
            x.Add().Text(T("Admin.Catalog.Products.ProductVariantAttributes.Attributes").Text).Content(TabAttributes().ToHtmlString()).Selected(true);
            x.Add().Text(T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations").Text).Content(TabAttributeCombinations().ToHtmlString());

            //generate an event
            EngineContext.Current.Resolve<IEventPublisher>().Publish(new AdminTabStripCreated(x, "productvariantattribute-edit"));
        })
    }
    else
    {
        @T("Admin.Catalog.Products.ProductVariantAttributes.NoAttributesAvailable")
    }
}
else
{
    @T("Admin.Catalog.Products.ProductVariantAttributes.SaveBeforeEdit")
}


@helper TabAttributes()
{
    <div id="productvariantattributes-grid"></div>

    <script>
        $(document).ready(function () {
            $("#productvariantattributes-grid").kendoGrid({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("ProductVariantAttributeList", "Product", new { productId = Model.Id }))",
                            type: "POST",
                            dataType: "json"
                        },
                        create: {
                            url: "@Html.Raw(Url.Action("ProductVariantAttributeInsert", "Product", new { productId = Model.Id }))",
                            type: "POST",
                            dataType: "json"
                        },
                        update: {
                            url:"@Html.Raw(Url.Action("ProductVariantAttributeUpdate", "Product"))",
                            type: "POST",
                            dataType: "json"
                        },
                        destroy: {
                            url: "@Html.Raw(Url.Action("ProductVariantAttributeDelete", "Product"))",
                            type: "POST",
                            dataType: "json"
                        },
                        contentType: "application/json"
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors",
                        model: {
                            id: "Id",
                            fields: {
                                ProductAttribute: { editable: true, type: "string" },
                                ProductAttributeId: { editable: true, type: "number" },
                                TextPrompt: { editable: true, type: "string" },
                                IsRequired: { editable: true, type: "boolean" },
                                AttributeControlType: { editable: true, type: "string" },
                                AttributeControlTypeId: { editable: true, type: "number" },
                                //ProductId: { editable: false, type: "number" },
                                DisplayOrder1: { editable: true, type: "number" },
                                ViewEditUrl: { editable: false, type: "string" },
                                ViewEditText: { editable: false, type: "string" },
                                Id: { editable: false }
                            }
                        }
                    },
                    requestEnd: function (e) {
                        if (e.type == "create" || e.type == "update") {
                            this.read();
                        }
                    },
                    error: function (e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    numeric: false,
                    previousNext: false,
                    info: false
                },
                toolbar: ["create"],
                edit: function(e) {
                    if (e.model.isNew()) {
                        //little hack here
                        //pre-select the first value of kendoui dropdownlist datasource
                        //for some reasons (maybe, bug) it always sends 0
                        //if no value has been selected (changed) in the dropdownlist
                        if (allProductAttributes.length > 0) {
                            e.model.ProductAttributeId = allProductAttributes[0].Id;
                        }
                        if (allAttributeControlTypes.length > 0) {
                            e.model.AttributeControlTypeId = allAttributeControlTypes[0].Id;
                        }
                    }
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "ProductAttributeId",
                    title: "@T("Admin.Catalog.Products.ProductVariantAttributes.Attributes.Fields.Attribute")",
                    width: 250,
                    editor: productAttributeDropDownEditor,
                    template: "#:ProductAttribute#"
                },{
                    field: "TextPrompt",
                    title: "@T("Admin.Catalog.Products.ProductVariantAttributes.Attributes.Fields.TextPrompt")",
                    width: 150
                },{
                    field: "IsRequired",
                    title: "@T("Admin.Catalog.Products.ProductVariantAttributes.Attributes.Fields.IsRequired")",
                    width: 150,
                    template: '<img src="@Url.Content("~/Administration/Content/images/")active-#=IsRequired#.gif" />'
        },
                {
                    field: "AttributeControlTypeId",
                    title: "@T("Admin.Catalog.Products.ProductVariantAttributes.Attributes.Fields.AttributeControlType")",
                    width: 250,
                    editor: attributeControlTypeDropDownEditor,
                    template: "#:AttributeControlType#"
                },

                {
                    field: "DisplayOrder1",
                    title: "@T("Admin.Catalog.Products.ProductVariantAttributes.Attributes.Fields.DisplayOrder")",
                    width: 150,
                    //integer format
                    format: "{0:0}"
                }, {
                    field: "ViewEditUrl",
                    title: "@T("Admin.Catalog.Products.ProductVariantAttributes.Attributes.Values")",
                    width: 150,
                    template: "<a href='#=ViewEditUrl#\'>#:ViewEditText#</a>"
                },{
                    command: [{
                        name: "edit",
                        text: "@T("Admin.Common.Edit")"
                    }, {
                        name: "destroy",
                        text: "@T("Admin.Common.Delete")"
                    }],
                    width: 200
                }]
            });
        });

        //local datasource
        var allProductAttributes = [
            @{
                var productAttributeService = EngineContext.Current.Resolve<IProductAttributeService>();
                var allProductAttributes = productAttributeService.GetAllProductAttributes();
            }
            @for (int i = 0; i < allProductAttributes.Count; i++)
            {
                var productAttributes = allProductAttributes[i];
                <text>
                {
                    Id: @(productAttributes.Id),
                    Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(productAttributes.Name)))"
                }
                    </text>
                if (i != allProductAttributes.Count - 1)
                {
                    <text>,</text>
                }
            }
        ];

        var allAttributeControlTypes = [
            @{
                var allAttributeControlTypes = (from act in AttributeControlType.DropdownList.ToSelectList()
                                      select new {Id = act.Value, Name = act.Text}).ToList();
            }
            @for (int i = 0; i < allAttributeControlTypes.Count; i++)
            {
                var attributeControlType = allAttributeControlTypes[i];
                <text>
                {
                Id: @(attributeControlType.Id),
                Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(attributeControlType.Name)))"
                }
                </text>
                if (i != allAttributeControlTypes.Count - 1)
                {
                    <text>,</text>
                }
            }
        ];

        function productAttributeDropDownEditor(container, options) {
            $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:ProductAttributeId"/>')
                .appendTo(container)
                .kendoDropDownList({
                    autoBind: false,
                    dataSource: allProductAttributes
                });
        }

        function attributeControlTypeDropDownEditor(container, options) {
            $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:AttributeControlTypeId"/>')
                .appendTo(container)
                .kendoDropDownList({
                    autoBind: false,
                    dataSource: allAttributeControlTypes
                });
        }
    </script>
}
@helper TabAttributeCombinations()
{
    <div style="margin: 10px 0px 10px 0px;">
        <strong>@T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.Description")</strong>
    </div>
    <div>
        @(Html.Telerik().Grid<ProductModel.ProductVariantAttributeCombinationModel>()
                .Name("attributecombinations-grid")
                .DataKeys(keys =>
                {
                    keys.Add(x => x.Id);
                })
                .DataBinding(dataBinding =>
                {
                    dataBinding.Ajax()
                        .Select("ProductVariantAttributeCombinationList", "Product", new { productId = Model.Id })
                        .Update("ProductVariantAttrbiuteCombinationUpdate", "Product")
                        .Delete("ProductVariantAttributeCombinationDelete", "Product");
                })
                .Columns(columns =>
                {
                    columns.Bound(x => x.AttributesXml)
                        .ClientTemplate("<#= AttributesXml #><br /><span style=\"color: red\"><#= Warnings #></span>")
                        .Encoded(false)
                        .ReadOnly();
                    columns.Bound(x => x.StockQuantity1)
                        .Centered();
                    columns.Bound(x => x.AllowOutOfStockOrders1)
                            .Template(
                                @<img alt="" src="@Url.Content("~/Administration/Content/images/active-" + item.AllowOutOfStockOrders1.ToString().ToLowerInvariant() + ".gif")" />
                            )
                            .ClientTemplate("<img alt='' src='" + Url.Content("~/Administration/Content/images/") + "active-<#= AllowOutOfStockOrders1 #>.gif' />")
                            .Centered();
                    columns.Bound(x => x.Sku1)
                        .Centered();
                    columns.Bound(x => x.ManufacturerPartNumber1)
                        .Centered();
                    columns.Bound(x => x.Gtin1)
                        .Centered();
                    columns.Bound(x => x.OverriddenPrice)
                        .Centered();
                    columns.Command(commands =>
                    {
                        commands.Edit().Text(T("Admin.Common.Edit").Text);
                        commands.Delete().Text(T("Admin.Common.Delete").Text);
                    })
                    .Width(180);
                })
                .EnableCustomBinding(true))
    </div>
    <div>
        <p>
        <input type="submit" id="btnAddNewCombination" name="btnAddNewCombination" value="@T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.AddNew")" onclick="javascript:OpenWindow('@(Url.Action("AddAttributeCombinationPopup", "Product", new { productId = Model.Id, btnId = "btnRefreshCombinations", formId = "product-form" }))', 800, 600, true); return false;" class="t-button" />
        <input type="button" id="btnGenerateAllCombinations" value="@T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.GenerateAll")" class="t-button" />
</p>
        <input type="submit" id="btnRefreshCombinations" name="btnRefreshCombinations" style="display: none" />
        <script type="text/javascript">
            $(document).ready(function () {
                //refresh button
                $('#btnRefreshCombinations').click(function () {
                    //refresh grid
                    var optionsGrid = $("#attributecombinations-grid");
                    optionsGrid.data('tGrid').ajaxRequest();

                    //return false to don't reload a page
                    return false;
                });
                
                
                //generate combinations
                $('#btnGenerateAllCombinations').click(function () {
                    if (confirm('@T("Admin.Common.AreYouSure")')) {
                        $.ajax({
                            cache: false,
                            type: 'POST',
                            url: '@Url.Action("GenerateAllAttributeCombinations", "Product", new { productId = Model.Id })',
                            dataType: 'json',
                            success: function(data) {
                                //refresh grid
                                var optionsGrid = $("#attributecombinations-grid");
                                optionsGrid.data('tGrid').ajaxRequest();
                            },
                            error: function(xhr, ajaxOptions, thrownError) {
                                alert('Error while generating attribute combinations');
                            }
                        });
                    }
                    return false;
                });
            });
        </script>
    </div>
}