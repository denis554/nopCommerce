@model MessageTemplateModel

@using Nop.Core.Domain.Messages;

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function () {
        bindBootstrapTabSelectEvent('template-edit');
    });
</script>

<div class="content">
    <div class="form-horizontal">
        <div id="template-edit" class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                @Html.RenderBootstrapTabHeader("tab-info", @T("Admin.ContentManagement.MessageTemplates.Info"), true)
                @Html.RenderBootstrapTabHeader("tab-stores", @T("Admin.ContentManagement.MessageTemplates.Stores"))
            </ul>
            <div class="tab-content">
                @Html.RenderBootstrapTabContent("tab-info", @TabInfo(), true)
                @Html.RenderBootstrapTabContent("tab-stores", @TabStores())
            </div>
        </div>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "template-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab name*@
<input type="hidden" id="selected-tab-name" name="selected-tab-name" value="@(Html.GetSelectedTabName())">

@helper TabInfo()
{
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.AllowedTokens)
                    </div>
                    <div class="col-sm-9">
                        <a id="allowedTokensShowHide" href="javascript:toggleLoadedAllowedTokens();">@T("Admin.Common.Show")</a>
                        <div id="pnlAllowedTokens" style="display: none">
                            @Html.DisplayFor(model => model.AllowedTokens)
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.Name)
                    </div>
                    <div class="col-sm-9">
                        @Model.Name
                        @Html.HiddenFor(model => model.Name)
                    </div>
                </div>
                <script type="text/javascript">
                    function toggleLoadedAllowedTokens() {
                        $('#pnlAllowedTokens').toggle();
                        if ($('#pnlAllowedTokens').css('display') == 'none') {
                            $('#allowedTokensShowHide').html('@T("Admin.Common.Show")');
                        }
                        else {
                            $('#allowedTokensShowHide').html('@T("Admin.Common.Hide")');
                        }
                    }
                </script>
            </div>
        </div>
        @(Html.LocalizedEditor<MessageTemplateModel, MessageTemplateLocalizedModel>("messagetemplate-localized",
            @<div class="panel panel-default">
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.NopLabelFor(model => model.Locales[item].Subject)
                        </div>
                        <div class="col-sm-9">
                            @Html.NopEditorFor(model => model.Locales[item].Subject)
                            @Html.ValidationMessageFor(model => model.Locales[item].Subject)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.NopLabelFor(model => model.Locales[item].Body)
                        </div>
                        <div class="col-sm-9">
                            @Html.EditorFor(model => model.Locales[item].Body, "RichEditor")
                            @Html.ValidationMessageFor(model => model.Locales[item].Body)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.NopLabelFor(model => model.Locales[item].BccEmailAddresses)
                        </div>
                        <div class="col-sm-9">
                            @Html.NopEditorFor(model => model.Locales[item].BccEmailAddresses)
                            @Html.ValidationMessageFor(model => model.Locales[item].BccEmailAddresses)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.NopLabelFor(model => model.Locales[item].EmailAccountId)
                        </div>
                        <div class="col-sm-9">
                            @Html.NopDropDownListFor(model => model.Locales[item].EmailAccountId, new SelectList(Model.AvailableEmailAccounts, "Id", "DisplayName", Model.Locales[item].EmailAccountId))
                            @Html.ValidationMessageFor(model => model.Locales[item].EmailAccountId)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3">
                            <label class="control-label">@T("Admin.ContentManagement.MessageTemplates.Test")</label>
                        </div>
                        <div class="col-sm-9">
                            <input type="button" class="btn btn-default" value="@T("Admin.ContentManagement.MessageTemplates.Test")" onclick="setLocation('@(Url.Action("TestTemplate", new {id = Model.Id, languageId = Model.Locales[item].LanguageId}))')" />
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.Locales[item].LanguageId)
                </div>
            </div>
    ,
            @<div class="panel panel-default">
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.NopLabelFor(model => model.Subject)
                        </div>
                        <div class="col-sm-9">
                            @Html.NopEditorFor(model => model.Subject)
                            @Html.ValidationMessageFor(model => model.Subject)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.NopLabelFor(model => model.Body)
                        </div>
                        <div class="col-sm-9">
                            @Html.EditorFor(model => model.Body, "RichEditor")
                            @Html.ValidationMessageFor(model => model.Body)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.NopLabelFor(model => model.BccEmailAddresses)
                        </div>
                        <div class="col-sm-9">
                            @Html.NopEditorFor(model => model.BccEmailAddresses)
                            @Html.ValidationMessageFor(model => model.BccEmailAddresses)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.NopLabelFor(model => model.EmailAccountId)
                        </div>
                        <div class="col-sm-9">
                            @Html.NopDropDownListFor(model => model.EmailAccountId, new SelectList(Model.AvailableEmailAccounts, "Id", "DisplayName"))
                            @Html.ValidationMessageFor(model => model.EmailAccountId)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3">
                            <label class="control-label">@T("Admin.ContentManagement.MessageTemplates.Test")</label>
                        </div>
                        <div class="col-sm-9">
                            <input type="button" class="btn btn-default" value="@T("Admin.ContentManagement.MessageTemplates.Test")" onclick="setLocation('@(Url.Action("TestTemplate", new {id = Model.Id}))')" />
                        </div>
                    </div>
                </div>
            </div>
    ))
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.IsActive)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.IsActive)
                        @Html.ValidationMessageFor(model => model.IsActive)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.SendImmediately)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.SendImmediately)
                        @Html.ValidationMessageFor(model => model.SendImmediately)
                    </div>
                </div>
                <div class="form-group" id="pnl-send-after">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.DelayBeforeSend)
                    </div>
                    <div class="col-sm-9">
                        <div class="row">
                            <div class="col-sm-2">
                                @Html.NopEditorFor(model => model.DelayBeforeSend)
                                @Html.ValidationMessageFor(model => model.DelayBeforeSend)
                            </div>
                            <div class="col-sm-2">
                                @Html.NopDropDownListFor(model => model.DelayPeriodId, ((MessageDelayPeriod)Model.DelayPeriodId).ToSelectList())
                                @Html.ValidationMessageFor(model => model.DelayPeriodId)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.AttachedDownloadId)
                    </div>
                    <div class="col-sm-3">
                        @{
                            //Static file attachments do not support URLs yet
                            //A store owner have to upload a file
                            //we store a value into "ViewData" and then use it in the Download.cshtml file
                            ViewData["nop.DownloadEditor.DisableUrl"] = true;
                        }
                        <div class="checkbox">
                            <label>
                                @Html.NopEditorFor(model => model.HasAttachedDownload)
                                @T("Admin.ContentManagement.MessageTemplates.Fields.AttachedDownload.Exists")
                            </label>
                        </div>
                        <div id="pnlAttachedDownload">
                            @Html.NopEditorFor(model => model.AttachedDownloadId)
                            @Html.ValidationMessageFor(model => model.AttachedDownloadId)
                        </div>
                    </div>
                    <div class="col-sm-3">
                        &nbsp;
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        $(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.HasAttachedDownload)").change(toggleHasAttachedDownload);
            $("#@Html.FieldIdFor(model => model.SendImmediately)").click(sendImmediately);
            toggleHasAttachedDownload();
            sendImmediately();
        });

        function toggleHasAttachedDownload() {
            if ($('#@Html.FieldIdFor(model => model.HasAttachedDownload)').is(':checked')) {
                $('#pnlAttachedDownload').show();
            }
            else {
                $('#pnlAttachedDownload').hide();
            }
        }

        function sendImmediately() {
            if ($('#@Html.FieldIdFor(model => model.SendImmediately)').is(':checked'))
                $('#pnl-send-after').hide();
            else
                $('#pnl-send-after').show();
        }
    </script>
}

@helper TabStores()
{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);
            toggleStoreMapping();
        });

        function toggleStoreMapping() {
            if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
                $('#pnl-available-stores').show();
            } else {
                $('#pnl-available-stores').hide();
            }
        }
    </script>

    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.LimitedToStores)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.LimitedToStores)
                        @Html.ValidationMessageFor(model => model.LimitedToStores)
                    </div>
                </div>
                <div id="pnl-available-stores">
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.NopLabelFor(model => model.AvailableStores)
                        </div>
                        <div class="col-sm-9">
                            @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                            {
                                @Html.Action("MultistoreDisabledWarning", "Common")
                                foreach (var store in Model.AvailableStores)
                                {
                                    <div class="checkbox">
                                        <label>
                                            <input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />@store.Name
                                        </label>
                                    </div>
                                }
                            }
                            else
                            {
                                <div>No stores defined</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

