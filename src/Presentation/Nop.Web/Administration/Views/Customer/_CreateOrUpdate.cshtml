@model Nop.Admin.Models.CustomerModel
@using Nop.Web.Framework;
@using Telerik.Web.Mvc.UI;

@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Id)

@Html.Telerik().TabStrip().Name("customer-edit").Items(x =>
{
    x.Add().Text(T("Admin.Customers.Customers.Info").Text).Content(TabInfo().ToHtmlString()).Selected(true);
    x.Add().Text(T("Admin.Customers.Customers.CustomerRoles").Text).Content(TabCustomerRoles().ToHtmlString());
    if (Model.DisplayRewardPointsHistory)
    {
        x.Add().Text(T("Admin.Customers.Customers.RewardPoints").Text).Content(TabRewardPoints().ToHtmlString());
    }
})

@helper TabInfo()
    { 
<table class="adminContent">
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.Gender):
        </td>
        <td class="adminData">
            @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "Gender_Male" })
            <label class="forcheckbox" for="Gender_Male">@T("Admin.Common.Gender.Male")</label>
            
            @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "Gender_Female" })
            <label class="forcheckbox" for="Gender_Female">@T("Admin.Common.Gender.Female")</label>
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.FirstName):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.FirstName)
            @Html.ValidationMessageFor(model => model.FirstName)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.LastName):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.LastName)
            @Html.ValidationMessageFor(model => model.LastName)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.DateOfBirth):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.DateOfBirth)
            @Html.ValidationMessageFor(model => model.DateOfBirth)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.AdminComment):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.AdminComment)
            @Html.ValidationMessageFor(model => model.AdminComment)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.IsTaxExempt):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.IsTaxExempt)
            @Html.ValidationMessageFor(model => model.IsTaxExempt)
        </td>
    </tr>
    @if (Model.AllowCustomersToSetTimeZone)
    {
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.TimeZoneId):
        </td>
        <td class="adminData">
            @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
            @Html.ValidationMessageFor(model => model.TimeZoneId)
        </td>
    </tr>
    }
    @if (Model.DisplayVatNumber)
    {
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.VatNumber):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.VatNumber) 
            (@string.Format(T("Admin.Customers.Customers.Fields.VatNumberStatus").Text, Model.VatNumberStatusNote)) 
            <button type="submit" name="markVatNumberAsValid" value="markVatNumberAsValid" class="t-button">@T("Admin.Customers.Customers.Fields.VatNumber.MarkAsValid")</button>
            <button type="submit" name="markVatNumberAsInvalid" value="markVatNumberAsInvalid" class="t-button">@T("Admin.Customers.Customers.Fields.VatNumber.MarkAsInvalid")</button>
            @Html.ValidationMessageFor(model => model.VatNumber)
        </td>
    </tr>
    }
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.Active):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.Active)
            @Html.ValidationMessageFor(model => model.Active)
        </td>
    </tr>
    @if (!String.IsNullOrEmpty(Model.CreatedOnStr))
    {
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.CreatedOnStr):
        </td>
        <td class="adminData">
            @Model.CreatedOnStr
        </td>
    </tr>
    }
</table>
    }
@helper TabCustomerRoles()
{
    foreach (var customerRole in Model.AvailableCustomerRoles)
    {
        <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id"
        @if (Model.SelectedCustomerRoleIds != null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))
        {
            <text>checked="checked"</text>
        }
        />@customerRole.Name
        <br />
    }
}
@helper TabRewardPoints()
{
    @(Html.Telerik().Grid<Nop.Admin.Models.CustomerModel.RewardPointsHistoryModel>().Name("customer-rewardpoints-grid")
    .DataKeys(keys =>
    {
        keys.Add(x => x.Id).RouteKey("rewardPointsHistoryId");
    })
    .DataBinding(binding =>
    {
        binding.Ajax().Select("RewardPointsHistorySelect", "Customer", new { customerId = Model.Id })
            .Insert("RewardPointsHistoryAdd", "Customer", new { customerId = Model.Id });
    })
    .Columns(columns =>
    {
        columns.Bound(x => x.Points);
        columns.Bound(x => x.PointsBalance).ReadOnly();
        columns.Bound(x => x.Message);
        columns.Bound(x => x.CreatedOnStr).ReadOnly();
    }))
    <div class="clear">
    </div>
    
    <p>
        <strong>
            @T("Admin.Customers.Customers.RewardPoints.AddTitle")
        </strong>
    </p>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AddRewardPointsValue)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AddRewardPointsValue)
                @Html.ValidationMessageFor(model => model.AddRewardPointsValue)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AddRewardPointsMessage)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AddRewardPointsMessage)
                @Html.ValidationMessageFor(model => model.AddRewardPointsMessage)
            </td>
        </tr>
        <tr>
            <td colspan="2" align="left">
                <button type="button" name="addRewardPoints" id="addRewardPoints" class="t-button">
                    @T("Admin.Customers.Customers.RewardPoints.AddButton")</button>
            </td>
        </tr>
    </table>
    
    <script type="text/javascript">
        $(document).ready(function () {
            $('#addRewardPoints').click(function () {
                var rewardPointsValue = $("#@Html.FieldIdFor(model => model.AddRewardPointsValue)").val();
                var rewardPointsMessage = $("#@Html.FieldIdFor(model => model.AddRewardPointsMessage)").val();
                $.ajax({
                    type: "GET",
                    url: "@(Url.Action("RewardPointsHistoryAdd", "Customer"))",
                    data: "addRewardPointsValue=" + rewardPointsValue + "&addRewardPointsMessage=" + rewardPointsMessage + "&customerId=" + @Model.Id,
                    success: function (data) {
                         alert('Reward points are added')
                         var rewardPointsGrid = $("#customer-rewardpoints-grid");
                         rewardPointsGrid.data('tGrid').ajaxRequest();
                    },
                    error:function (xhr, ajaxOptions, thrownError){
                        alert('Failed to add reward points.')
                    }  
                });
            });
        });
    </script>
}