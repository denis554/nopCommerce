@model LanguageModel
@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function () {
        $("#language-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>
<div id="language-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Configuration.Languages.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Configuration.Languages.Stores")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Configuration.Languages.Resources")
        </li>
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabStores()
    </div>
    <div>
        @TabResources()
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "language-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}


@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    <script type="text/javascript">
        function toggleFlags() {
            $('#pnlAllFlags').toggle();
            if ($('#pnlAllFlags').css('display') == 'none') {
                $('#displayAllFlags').html('@T("Admin.Common.Show")');
            }
            else {
                $('#displayAllFlags').html('@T("Admin.Common.Hide")');
            }
        }
    </script>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Name):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.LanguageCulture):
            </td>
            <td class="adminData">
                 @{
                    var cultures = System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes.SpecificCultures)
                        .OrderBy(x => x.EnglishName)
                        .Select(x => new SelectListItem
                                         {
                                             Value = x.IetfLanguageTag,
                                             Text = string.Format("{0}. {1}", x.EnglishName, x.IetfLanguageTag)
                                         });
                }
                @Html.DropDownListFor(model => model.LanguageCulture, cultures)
                @Html.ValidationMessageFor(model => model.LanguageCulture)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.UniqueSeoCode):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.UniqueSeoCode)
                @Html.ValidationMessageFor(model => model.UniqueSeoCode)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.FlagImageFileName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.FlagImageFileName)
                @Html.ValidationMessageFor(model => model.FlagImageFileName)
                <br/>
                <a id="displayAllFlags" href="javascript:toggleFlags();">@T("Admin.Common.Show")</a>
                <div id="pnlAllFlags" style="display: none">
                    @foreach (var fileName in Model.FlagFileNames)
                    {
                        <img alt="" src="@Url.Content("~/Content/Images/flags/" + fileName)"/>
                        @fileName
                        <text>, </text>
                    }
                </div>
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Rtl):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Rtl)
                @Html.ValidationMessageFor(model => model.Rtl)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.DefaultCurrencyId):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.DefaultCurrencyId, Model.AvailableCurrencies)
                @Html.ValidationMessageFor(model => model.DefaultCurrencyId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Published):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Published)
                @Html.ValidationMessageFor(model => model.Published)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.DisplayOrder):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisplayOrder)
                @Html.ValidationMessageFor(model => model.DisplayOrder)
            </td>
        </tr>
    </table>
}
@helper TabStores()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);

            toggleStoreMapping();
        });


        function toggleStoreMapping() {
            if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
                $('#pnl-available-stores').show();
            }
            else {
                $('#pnl-available-stores').hide();
            }
        }

    </script>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.LimitedToStores):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LimitedToStores)
                @Html.ValidationMessageFor(model => model.LimitedToStores)
            </td>
        </tr>
        <tr id="pnl-available-stores">
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AvailableStores):
            </td>
            <td class="adminData">
                @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                {
                    @Html.Action("MultistoreDisabledWarning", "Common")
                    foreach (var store in Model.AvailableStores)
                    {
                    <div>
                        <input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />@store.Name
                    </div>
                    }
                }
                else
                {
                    <div>No stores defined</div>
                }
            </td>
        </tr>
    </table>
}

@helper TabResources()
{
    <table class="adminContent">
        <tr>
            <td>
                @if (Model.Id > 0)
                {
                    @T("Admin.Configuration.Languages.Resources.Description")
                }
                else
                {
                    @T("Admin.Configuration.Languages.Resources.SaveBeforeEdit")
                }
            </td>
        </tr>
        <tr>
            <td>
                @if (Model.Id > 0)
                {
                    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
                    var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
                    <div id="resources-grid"></div>

                    <script>
                        $(document).ready(function() {
                            $("#resources-grid").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("Resources", "Language", new {languageId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            contentType: "application/json"
                                            //any-forgery does not work with this contentType for some reasons
                                            //data: addAntiForgeryToken
                                        },
                                        create: {
                                            url: "@Html.Raw(Url.Action("ResourceAdd", "Language", new {languageId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        update: {
                                            url: "@Html.Raw(Url.Action("ResourceUpdate", "Language"))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        destroy: {
                                            url: "@Html.Raw(Url.Action("ResourceDelete", "Language"))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        parameterMap: function(data, operation) {
                                            if (operation != "read") {
                                                return data;
                                            } else {
                                                //for some reasons only such "Filter" data be parsed
                                                return JSON.stringify(data);
                                            }
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors",
                                        model: {
                                            id: "Id",
                                            fields: {
                                                Name: { editable: true, type: "string" },
                                                Value: { editable: true, type: "string" },
                                                Id: { editable: false, type: "number" }
                                            }
                                        }
                                    },
                                    requestEnd: function(e) {
                                        if (e.type == "create" || e.type == "update") {
                                            this.read();
                                        }
                                    },
                                    error: function(e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    pageSize: @(defaultGridPageSize),
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                pageable: {
                                    refresh: true,
                                    pageSizes: [@(gridPageSizes)]
                                },
                                sortable: true,
                                toolbar: [{ name: "create", text: "@T("Admin.Common.AddNewRecord")" }],
                                editable: {
                                    confirmation: false,
                                    mode: "inline"
                                },
                                filterable: {
                                    extra: false,
                                    operators: {
                                        string: {
                                            contains: "Contains",
                                            eq: "Is equal to",
                                            startswith: "Starts with"
                                        }
                                    }
                                },
                                scrollable: false,
                                columns: [
                                    {
                                        field: "Name",
                                        title: "@T("Admin.Configuration.Languages.Resources.Fields.Name")",
                                        width: 300,
                                        filterable: true,
                                        sortable: true
                                    }, {
                                        field: "Value",
                                        title: "@T("Admin.Configuration.Languages.Resources.Fields.Value")",
                                        width: 300,
                                        filterable: true,
                                        sortable: true

                                    }, {
                                        command: [
                                            {
                                                name: "edit",
                                                text: {
                                                    edit: "@T("Admin.Common.Edit")",
                                                    update: "@T("Admin.Common.Update")",
                                                    cancel: "@T("Admin.Common.Cancel")"
                                                }
                                            }, {
                                                name: "destroy",
                                                text: "@T("Admin.Common.Delete")"
                                            }
                                        ],
                                        width: 200,
                                        filterable: false
                                    }
                                ]
                            });
                        });

                    </script>
                }
            </td>
        </tr>
    </table>
}
