@model PluginModel
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.SystemName)
@if (ViewBag.RefreshPage == true)
{
    <script type="text/javascript">
        try {window.opener.document.forms['@(ViewBag.formId)'].@(ViewBag.btnId).click();}
        catch (e){}
        window.close();
    </script>
}

<div class="content">
    <div class="form-horizontal">
        <div id="plugin-edit" class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                @Html.RenderBootstrapTabHeader("tab-info", @T("Admin.Configuration.Plugins.Info"), true)
                @Html.RenderBootstrapTabHeader("tab-stores", @T("Admin.Configuration.Plugins.Stores"))
            </ul>
            <div class="tab-content">
                @Html.RenderBootstrapTabContent("tab-info", @TabInfo(), true)
                @Html.RenderBootstrapTabContent("tab-stores", @TabStores(), true)
            </div>
        </div>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "plugin-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@helper TabInfo()
        {
    <div class="panel-group">
        <div class="panel panel-default no-border">
            @(Html.LocalizedEditor<PluginModel, PluginLocalizedModel>("plugin-localized",
                  @<div class="panel-body">
                      <div class="form-group">
                          <div class="col-sm-3">
                              @Html.NopLabelFor(model => model.Locales[item].FriendlyName)
                          </div>
                          <div class="col-sm-9">
                              @Html.NopEditorFor(model => model.Locales[item].FriendlyName)
                              @Html.ValidationMessageFor(model => model.Locales[item].FriendlyName)
                          </div>
                      </div>
                      <div>
                          @Html.HiddenFor(model => model.Locales[item].LanguageId)
                      </div>
                  </div>
    ,
                  @<div class="panel-body">
                      <div class="form-group">
                          <div class="col-sm-3">
                              @Html.NopLabelFor(model => model.FriendlyName)
                          </div>
                          <div class="col-sm-9">
                              @Html.NopEditorFor(model => model.FriendlyName)
                              @Html.ValidationMessageFor(model => model.FriendlyName)
                          </div>
                      </div>
                  </div>
                  ))
        </div>

        <div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.DisplayOrder)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.DisplayOrder)
                        @Html.ValidationMessageFor(model => model.DisplayOrder)
                    </div>
                </div>
                @if (Model.CanChangeEnabled)
                {
                    <div class="form-group">
                        <div class="col-sm-3">
                            @Html.NopLabelFor(model => model.IsEnabled)
                        </div>
                        <div class="col-sm-9">
                            @Html.NopEditorFor(model => model.IsEnabled)
                            @Html.ValidationMessageFor(model => model.IsEnabled)
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

}
@helper TabStores()
        {
    <script type="text/javascript">
        $(document).ready(function() {

            $("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);

            toggleStoreMapping();
        });


        function toggleStoreMapping() {
            if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
                $('#pnl-available-stores').show();
            } else {
                $('#pnl-available-stores').hide();
            }
        }

    </script>

    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.LimitedToStores)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.LimitedToStores)
                        @Html.ValidationMessageFor(model => model.LimitedToStores)
                    </div>
                </div>
                <div class="form-group" id="pnl-available-stores">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.AvailableStores)
                    </div>
                    <div class="col-sm-9">
                        @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                        {
                            @Html.Action("MultistoreDisabledWarning", "Common")
                            foreach (var store in Model.AvailableStores)
                            {
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />@store.Name
                                    </label>
                                </div>
                            }
                        }
                        else
                        {
                            <text>No stores defined</text>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
