@model ManufacturerModel
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function() {
        $("#manufacturer-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>
<div class="content">
    <div id="manufacturer-edit">
        <ul>
            <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
                @T("Admin.Catalog.Manufacturers.Info")
            </li>
            <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
                @T("Admin.Common.SEO")
            </li>
            <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
                @T("Admin.Catalog.Manufacturers.Products")
            </li>
            <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
                @T("Admin.Catalog.Manufacturers.Discounts")
            </li>
            <li @Html.RenderSelectedTabIndex(4, GetSelectedTabIndex())>
                @T("Admin.Catalog.Manufacturers.Acl")
            </li>
            <li @Html.RenderSelectedTabIndex(5, GetSelectedTabIndex())>
                @T("Admin.Catalog.Manufacturers.Stores")
            </li>
        </ul>
        <div>
            @TabInfo()
        </div>
        <div>
            @TabSeo()
        </div>
        <div>
            @TabProducts()
        </div>
        <div>
            @TabDiscounts()
        </div>
        <div>
            @TabAcl()
        </div>
        <div>
            @TabStores()
        </div>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "manufacturer-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)").click(togglePageSize);
            togglePageSize();
        });

        function togglePageSize() {
            if ($('#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)').is(':checked')) {
                $('#pnlPageSize').hide();
                $('#pnlPageSizeOptions').show();
            } else {
                $('#pnlPageSize').show();
                $('#pnlPageSizeOptions').hide();
            }
        }
    </script>

    @(Html.LocalizedEditor<ManufacturerModel, ManufacturerLocalizedModel>("manufacturer-info-localized",
    @<div class="panel panel-default">
        <div class="panel-body">
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.Locales[item].Name)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(model => model.Locales[item].Name)
                    @Html.ValidationMessageFor(model => model.Locales[item].Name)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.Locales[item].Description)
                </div>
                <div class="col-sm-9">
                    @Html.EditorFor(model => model.Locales[item].Description, "RichEditor")
                    @Html.ValidationMessageFor(model => model.Locales[item].Description)
                </div>
            </div>
            <div class="form-group">
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </div>
        </div>
    </div>
        ,
    @<div class="panel panel-default">
        <div class="panel-body">
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.Name)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(model => model.Name)
                    @Html.ValidationMessageFor(model => model.Name)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.Description)
                </div>
                <div class="col-sm-9">
                    @Html.EditorFor(x => x.Description, "RichEditor")
                    @Html.ValidationMessageFor(model => model.Description)
                </div>
            </div>
        </div>
    </div>
    ))
    <div class="panel panel-default">
        <div class="panel-body">
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.ManufacturerTemplateId)
                </div>
                <div class="col-sm-9">
                    @Html.NopDropDownListFor(model => model.ManufacturerTemplateId, Model.AvailableManufacturerTemplates)
                    @Html.ValidationMessageFor(model => model.ManufacturerTemplateId)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.PictureId)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(model => model.PictureId)
                    @Html.ValidationMessageFor(model => model.PictureId)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.PriceRanges)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(x => x.PriceRanges)
                    @Html.ValidationMessageFor(model => model.PriceRanges)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.AllowCustomersToSelectPageSize)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(x => x.AllowCustomersToSelectPageSize)
                    @Html.ValidationMessageFor(model => model.AllowCustomersToSelectPageSize)
                </div>
            </div>
            <div id="pnlPageSize" class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.PageSize)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(x => x.PageSize)
                    @Html.ValidationMessageFor(model => model.PageSize)
                </div>
            </div>
            <div id="pnlPageSizeOptions" class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.PageSizeOptions)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(x => x.PageSizeOptions)
                    @Html.ValidationMessageFor(model => model.PageSizeOptions)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.Published)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(x => x.Published)
                    @Html.ValidationMessageFor(model => model.Published)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.DisplayOrder)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(model => model.DisplayOrder)
                    @Html.ValidationMessageFor(model => model.DisplayOrder)
                </div>
            </div>
        </div>
    </div>
}
@helper TabSeo()
        {
    @(Html.LocalizedEditor<ManufacturerModel, ManufacturerLocalizedModel>("manufacturer-seo-localized",
    @<div class="panel panel-default">
        <div class="panel-body">
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.Locales[item].MetaKeywords)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(model => model.Locales[item].MetaKeywords)
                    @Html.ValidationMessageFor(model => model.Locales[item].MetaKeywords)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.Locales[item].MetaDescription)
                </div>
                <div class="col-sm-9">
                    @Html.NopTextAreaFor(model => model.Locales[item].MetaDescription)
                    @Html.ValidationMessageFor(model => model.Locales[item].MetaDescription)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.Locales[item].MetaTitle)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(model => model.Locales[item].MetaTitle)
                    @Html.ValidationMessageFor(model => model.Locales[item].MetaTitle)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.Locales[item].SeName)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(model => model.Locales[item].SeName)
                    @Html.ValidationMessageFor(model => model.Locales[item].SeName)
                </div>
            </div>
            <div class="form-group">
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </div>
        </div>
    </div>
            ,
    @<div class="panel panel-default">
        <div class="panel-body">
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.MetaKeywords)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(x => x.MetaKeywords)
                    @Html.ValidationMessageFor(model => model.MetaKeywords)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.MetaDescription)
                </div>
                <div class="col-sm-9">
                    @Html.NopTextAreaFor(x => x.MetaDescription)
                    @Html.ValidationMessageFor(model => model.MetaDescription)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.MetaTitle)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(x => x.MetaTitle)
                    @Html.ValidationMessageFor(model => model.MetaTitle)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.SeName)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(x => x.SeName)
                    @Html.ValidationMessageFor(model => model.SeName)
                </div>
            </div>
        </div>
    </div>))
}
@helper TabProducts()
        {
if (Model.Id > 0)
{
        <div class="panel panel-default">
            <div class="panel-body">

                @{
                    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>
                        ().DefaultGridPageSize;
                    var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>
                        ().GridPageSizes;
                }

                <div id="products-grid"></div>

                <script>
                    $(document).ready(function() {
                        $("#products-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("ProductList", "Manufacturer", new {manufacturerId = Model.Id}))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    },
                                    update: {
                                        url: "@Html.Raw(Url.Action("ProductUpdate", "Manufacturer"))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    },
                                    destroy: {
                                        url: "@Html.Raw(Url.Action("ProductDelete", "Manufacturer"))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors",
                                    model: {
                                        id: "Id",
                                        fields: {
                                            ProductName: { editable: false, type: "string" },
                                            IsFeaturedProduct: { editable: true, type: "boolean" },
                                            DisplayOrder: { editable: true, type: "number" },
                                            ProductId: { editable: false, type: "number" }
                                        }
                                    }
                                },
                                requestEnd: function(e) {
                                    if (e.type == "update") {
                                        this.read();
                                    }
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(defaultGridPageSize),
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: [@(gridPageSizes)]
                            },
                            editable: {
                                confirmation: false,
                                mode: "inline"
                            },
                            scrollable: false,
                            columns: [
                            {
                                field: "ProductName",
                                editable: false,
                                type: "string",
                                title: "@T("Admin.Catalog.Manufacturers.Products.Fields.Product")"
                            }, {
                                field: "IsFeaturedProduct",
                                title: "@T("Admin.Catalog.Manufacturers.Products.Fields.IsFeaturedProduct")",
                                width: 150,
                                headerAttributes: { style: "text-align:center" },
                                attributes: { style: "text-align:center" },
                                template: '<img src="@Url.Content("~/Administration/Content/images/")active-#=IsFeaturedProduct#.gif" />'
                            }, {
                                field: "DisplayOrder",
                                title: "@T("Admin.Catalog.Manufacturers.Products.Fields.DisplayOrder")",
                                //integer format
                                format: "{0:0}",
                                width: 150
                            }, {
                                field: "ProductId",
                                title: "@T("Admin.Common.View")",
                                width: 100,
                                template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=ProductId#">@T("Admin.Common.View")</a>'
                            }, {
                                command: [
                                {
                                    name: "edit",
                                    text: {
                                        edit: "@T("Admin.Common.Edit")",
                                        update: "@T("Admin.Common.Update")",
                                        cancel: "@T("Admin.Common.Cancel")"
                                    }
                                }, {
                                    name: "destroy",
                                    text: "@T("Admin.Common.Delete")"
                                }
                                ],
                                width: 200
                            }
                            ]
                        });
                    });
                </script>
            </div>

            <div class="panel-footer">
                <input type="submit" id="btnAddNewProduct" value="@T("Admin.Catalog.Manufacturers.Products.AddNew")" onclick="javascript:OpenWindow('@(Url.Action("ProductAddPopup", "Manufacturer", new { manufacturerId = Model.Id, btnId = "btnRefreshProducts", formId = "manufacturer-form" }))', 800, 800, true); return false;" class="btn btn-default" />
                <input type="submit" id="btnRefreshProducts" style="display: none" />
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('#btnRefreshProducts').click(function () {
                            //refresh grid
                            var grid = $("#products-grid").data('kendoGrid');
                            grid.dataSource.read();

                            //return false to don't reload a page
                            return false;
                        });
                    });
                </script>
            </div>
        </div>
                    }
                    else
                    {
                        <div class="panel panel-default">
                            <div class="panel-body">
                                @T("Admin.Catalog.Manufacturers.Products.SaveBeforeEdit")
                            </div>
                        </div>

                    }
}
@helper TabDiscounts()
        {
    <div class="panel panel-default">
        <div class="panel-body">

            @if (Model.AvailableDiscounts != null && Model.AvailableDiscounts.Count > 0)
            {
                foreach (var discount in Model.AvailableDiscounts)
                {
                    <div class="checkbox">
                        <label>
                            <input type="checkbox" name="SelectedDiscountIds" value="@discount.Id"
                                   @if (Model.SelectedDiscountIds != null && Model.SelectedDiscountIds.Contains(discount.Id)) { <text> checked="checked" </text>                                                      } />@discount.Name
                                @discount.Name
                            </label>
                        </div>
                }
            }
            else
            {
                @T("Admin.Catalog.Manufacturers.Discounts.NoDiscounts")
            }
        </div>
    </div>
}
@helper TabAcl()
        {
    <div class="panel panel-default">
        <div class="panel-body">

            <script type="text/javascript">
                $(document).ready(function() {

                    $("#@Html.FieldIdFor(model => model.SubjectToAcl)").click(toggleAcl);

                    toggleAcl();
                });

                function toggleAcl() {
                    if ($('#@Html.FieldIdFor(model => model.SubjectToAcl)').is(':checked')) {
                        $('#pnl-acl').show();
                    } else {
                        $('#pnl-acl').hide();
                    }
                }
            </script>

            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.SubjectToAcl)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(model => model.SubjectToAcl)
                    @Html.ValidationMessageFor(model => model.SubjectToAcl)
                </div>
            </div>
            <div id="pnl-acl" class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.AvailableCustomerRoles)
                </div>
                <div class="col-sm-9">
                    @if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
                    {
                        @Html.Action("AclDisabledWarning", "Common")
                        foreach (var customerRole in Model.AvailableCustomerRoles)
                        {
                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id"
                                           checked="@(Model.SelectedCustomerRoleIds != null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))" />
                                    @customerRole.Name
                                </label>
                            </div>
                        }
                    }
                    else
                    {
                        <div>No customer roles defined</div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@helper TabStores()
        {
    <div class="panel panel-default">
        <div class="panel-body">

            <script type="text/javascript">
                $(document).ready(function() {
                    $("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);
                    toggleStoreMapping();
                });

                function toggleStoreMapping() {
                    if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
                        $('#pnl-available-stores').show();
                    } else {
                        $('#pnl-available-stores').hide();
                    }
                }
            </script>

            <div class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.LimitedToStores)
                </div>
                <div class="col-sm-9">
                    @Html.NopEditorFor(model => model.LimitedToStores)
                    @Html.ValidationMessageFor(model => model.LimitedToStores)
                </div>
            </div>
            <div id="pnl-available-stores" class="form-group">
                <div class="col-sm-3">
                    @Html.NopLabelFor(model => model.AvailableStores)
                </div>
                <div class="col-sm-9">
                    @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                    {
                        @Html.Action("MultistoreDisabledWarning", "Common")
                        foreach (var store in Model.AvailableStores)
                        {
                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />
                                    @store.Name
                                </label>
                            </div>
                        }
                    }
                    else
                    {
                        <div>No stores defined</div>
                    }
                </div>
            </div>
        </div>
    </div>
}
