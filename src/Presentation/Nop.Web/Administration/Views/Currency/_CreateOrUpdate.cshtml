@model CurrencyModel

@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function () {
        bindBootstrapTabSelectEvent('currency-edit');
    });
</script>

<div class="content">
    <div class="form-horizontal">
        <div id="currency-edit" class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                @Html.RenderBootstrapTabHeader("tab-info", @T("Admin.Configuration.Currencies.Info"), true)
                @Html.RenderBootstrapTabHeader("tab-stores", @T("Admin.Configuration.Currencies.Stores"))
            </ul>
            <div class="tab-content">
                @Html.RenderBootstrapTabContent("tab-info", @TabInfo(), true)
                @Html.RenderBootstrapTabContent("tab-stores", @TabStores())
            </div>
        </div>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "currency-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab name*@
<input type="hidden" id="selected-tab-name" name="selected-tab-name" value="@(Html.GetSelectedTabName())">

@helper TabInfo()
{
    <div class="panel-group">
        @(Html.LocalizedEditor<CurrencyModel, CurrencyLocalizedModel>("currency-info-localized",
            @<div class="panel panel-default">
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Locales[item].Name)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.Locales[item].Name)
                            @Html.ValidationMessageFor(model => model.Locales[item].Name)
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.Locales[item].LanguageId)
                </div>
            </div>
    ,
            @<div class="panel panel-default">
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Name)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.Name)
                            @Html.ValidationMessageFor(model => model.Name)
                        </div>
                    </div>
                </div>
            </div>
    ))
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.CurrencyCode)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.CurrencyCode)
                        @Html.ValidationMessageFor(model => model.CurrencyCode)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Rate)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Rate)
                        @Html.ValidationMessageFor(model => model.Rate)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.DisplayLocale)
                    </div>
                    <div class="col-md-9">
                        @{
                            var cultures = System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes.SpecificCultures)
                                .OrderBy(x => x.EnglishName)
                                .Select(x => new SelectListItem
                                {
                                    Value = x.IetfLanguageTag,
                                    Text = string.Format("{0}. {1}", x.EnglishName, x.IetfLanguageTag)
                                })
                                .ToList();
                            cultures.Insert(0, new SelectListItem
                            {
                                Value = "",
                                Text = @T("Admin.Configuration.Currencies.Fields.DisplayLocale.Select").Text
                            });
                        }
                        @Html.NopDropDownListFor(model => model.DisplayLocale, cultures)
                        @Html.ValidationMessageFor(model => model.DisplayLocale)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.CustomFormatting)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.CustomFormatting)
                        @Html.ValidationMessageFor(model => model.CustomFormatting)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Published)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Published)
                        @Html.ValidationMessageFor(model => model.Published)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.DisplayOrder)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.DisplayOrder)
                        @Html.ValidationMessageFor(model => model.DisplayOrder)
                    </div>
                </div>
                @if (Model.Id > 0)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CreatedOn)
                        </div>
                        <div class="col-md-9">
                            @Html.DisplayFor(model => model.CreatedOn)
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@helper TabStores()
{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);
            toggleStoreMapping();
        });

        function toggleStoreMapping() {
            if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
                $('#pnl-available-stores').show();
            } else {
                $('#pnl-available-stores').hide();
            }
        }
    </script>

    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.LimitedToStores)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.LimitedToStores)
                        @Html.ValidationMessageFor(model => model.LimitedToStores)
                    </div>
                </div>
                <div class="form-group" id="pnl-available-stores">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.AvailableStores)
                    </div>
                    <div class="col-md-9">
                        @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                        {
                            @Html.Action("MultistoreDisabledWarning", "Common")
                            foreach (var store in Model.AvailableStores)
                            {
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />@store.Name
                                    </label>
                                </div>                                    }
                        }
                        else
                        {
                            <text>No stores defined</text>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
