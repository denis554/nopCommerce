@model CategoryModel

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function() {
        bindBootstrapTabSelectEvent('category-edit');
    });
</script>

<div class="content">
    <div class="form-horizontal">
        <div id="category-edit" class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                @Html.RenderBootstrapTabHeader("tab-info", @T("Admin.Catalog.Categories.Info"), true)
                @Html.RenderBootstrapTabHeader("tab-seo", @T("Admin.Common.SEO"))
                @Html.RenderBootstrapTabHeader("tab-products", @T("Admin.Catalog.Categories.Products"))
                @Html.RenderBootstrapTabHeader("tab-discounts", @T("Admin.Catalog.Categories.Discounts"))
                @Html.RenderBootstrapTabHeader("tab-acl", @T("Admin.Catalog.Categories.Acl"))
                @Html.RenderBootstrapTabHeader("tab-stores", @T("Admin.Catalog.Categories.Stores"))
            </ul>
            <div class="tab-content">
                @Html.RenderBootstrapTabContent("tab-info", @TabInfo(), true)
                @Html.RenderBootstrapTabContent("tab-seo", @TabSeo())
                @Html.RenderBootstrapTabContent("tab-products", @TabProducts())
                @Html.RenderBootstrapTabContent("tab-discounts", @TabDiscounts())
                @Html.RenderBootstrapTabContent("tab-acl", @TabAcl())
                @Html.RenderBootstrapTabContent("tab-stores", @TabStores())
            </div>
        </div>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "category-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab name*@
<input type="hidden" id="selected-tab-name" name="selected-tab-name" value="@(Html.GetSelectedTabName())">

@helper TabInfo()
{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)").click(togglePageSize);
            togglePageSize();
        });

        function togglePageSize() {
            if ($('#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)').is(':checked')) {
                $('#pnlPageSize').hide();
                $('#pnlPageSizeOptions').show();
            } else {
                $('#pnlPageSize').show();
                $('#pnlPageSizeOptions').hide();
            }
        }
    </script>

    <div class="panel-group">
        @(Html.LocalizedEditor<CategoryModel, CategoryLocalizedModel>("category-info-localized",
        @<div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.Locales[item].Name)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.Locales[item].Name)
                        @Html.ValidationMessageFor(model => model.Locales[item].Name)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.Locales[item].Description)
                    </div>
                    <div class="col-sm-9">
                        @Html.EditorFor(model => model.Locales[item].Description, "RichEditor")
                        @Html.ValidationMessageFor(model => model.Locales[item].Description)
                    </div>
                </div>
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </div>
        </div>
    ,
        @<div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.Name)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.Name)
                        @Html.ValidationMessageFor(model => model.Name)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.Description)
                    </div>
                    <div class="col-sm-9">
                        @Html.EditorFor(x => x.Description, "RichEditor")
                        @Html.ValidationMessageFor(model => model.Description)
                    </div>
                </div>
            </div>
        </div>
    ))

        <div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.CategoryTemplateId)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopDropDownListFor(model => model.CategoryTemplateId, Model.AvailableCategoryTemplates)
                        @Html.ValidationMessageFor(model => model.CategoryTemplateId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.PictureId)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.PictureId)
                        @Html.ValidationMessageFor(model => model.PictureId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.ParentCategoryId)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopDropDownListFor(model => model.ParentCategoryId, Model.AvailableCategories)
                        @Html.ValidationMessageFor(model => model.ParentCategoryId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.PriceRanges)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(x => x.PriceRanges)
                        @Html.ValidationMessageFor(model => model.PriceRanges)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.ShowOnHomePage)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(x => x.ShowOnHomePage)
                        @Html.ValidationMessageFor(model => model.ShowOnHomePage)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.IncludeInTopMenu)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(x => x.IncludeInTopMenu)
                        @Html.ValidationMessageFor(model => model.IncludeInTopMenu)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.AllowCustomersToSelectPageSize)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(x => x.AllowCustomersToSelectPageSize)
                        @Html.ValidationMessageFor(model => model.AllowCustomersToSelectPageSize)
                    </div>
                </div>
                <div id="pnlPageSize" class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.PageSize)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(x => x.PageSize)
                        @Html.ValidationMessageFor(model => model.PageSize)
                    </div>
                </div>
                <div id="pnlPageSizeOptions" class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.PageSizeOptions)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(x => x.PageSizeOptions)
                        @Html.ValidationMessageFor(model => model.PageSizeOptions)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.Published)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(x => x.Published)
                        @Html.ValidationMessageFor(model => model.Published)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.DisplayOrder)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.DisplayOrder)
                        @Html.ValidationMessageFor(model => model.DisplayOrder)
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@helper TabSeo()
{
    <div class="panel-group">
        @(Html.LocalizedEditor<CategoryModel, CategoryLocalizedModel>("category-seo-localized",
        @<div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.Locales[item].MetaKeywords)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.Locales[item].MetaKeywords)
                        @Html.ValidationMessageFor(model => model.Locales[item].MetaKeywords)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.Locales[item].MetaDescription)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopTextAreaFor(model => model.Locales[item].MetaDescription)
                        @Html.ValidationMessageFor(model => model.Locales[item].MetaDescription)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.Locales[item].MetaTitle)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.Locales[item].MetaTitle)
                        @Html.ValidationMessageFor(model => model.Locales[item].MetaTitle)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.Locales[item].SeName)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.Locales[item].SeName)
                        @Html.ValidationMessageFor(model => model.Locales[item].SeName)
                    </div>
                </div>
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </div>
        </div>
    ,
        @<div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.MetaKeywords)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(x => x.MetaKeywords)
                        @Html.ValidationMessageFor(model => model.MetaKeywords)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.MetaDescription)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopTextAreaFor(x => x.MetaDescription)
                        @Html.ValidationMessageFor(model => model.MetaDescription)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.MetaTitle)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(x => x.MetaTitle)
                        @Html.ValidationMessageFor(model => model.MetaTitle)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.SeName)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(x => x.SeName)
                        @Html.ValidationMessageFor(model => model.SeName)
                    </div>
                </div>
            </div>
        </div>))
    </div>
}

@helper TabProducts()
{
    <div class="panel-group">
        @if (Model.Id > 0)
        {
            <div class="panel panel-default">
                <div class="panel-body">
                    @{
                        var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>
                            ().DefaultGridPageSize;
                        var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>
                            ().GridPageSizes;
                    }

                    <div id="products-grid"></div>

                    <script>
                        $(document).ready(function() {
                            $("#products-grid").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("ProductList", "Category", new {categoryId = Model.Id}))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        update: {
                                            url: "@Html.Raw(Url.Action("ProductUpdate", "Category"))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        destroy: {
                                            url: "@Html.Raw(Url.Action("ProductDelete", "Category"))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors",
                                        model: {
                                            id: "Id",
                                            fields: {
                                                ProductName: { editable: false, type: "string" },
                                                IsFeaturedProduct: { editable: true, type: "boolean" },
                                                DisplayOrder: { editable: true, type: "number" },
                                                ProductId: { editable: false, type: "number" }
                                            }
                                        }
                                    },
                                    requestEnd: function(e) {
                                        if (e.type == "update") {
                                            this.read();
                                        }
                                    },
                                    error: function(e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    pageSize: @(defaultGridPageSize),
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                pageable: {
                                    refresh: true,
                                    pageSizes: [@(gridPageSizes)]
                                },
                                editable: {
                                    confirmation: false,
                                    mode: "inline"
                                },
                                scrollable: false,
                                columns: [
                                    {
                                        field: "ProductName",
                                        title: "@T("Admin.Catalog.Categories.Products.Fields.Product")"
                                    }, {
                                        field: "IsFeaturedProduct",
                                        title: "@T("Admin.Catalog.Categories.Products.Fields.IsFeaturedProduct")",
                                        width: 150,
                                        headerAttributes: { style: "text-align:center" },
                                        attributes: { style: "text-align:center" },
                                        template: '<img src="@Url.Content("~/Administration/Content/images/")active-#=IsFeaturedProduct#.gif" />'
                                    }, {
                                        field: "DisplayOrder",
                                        title: "@T("Admin.Catalog.Categories.Products.Fields.DisplayOrder")",
                                        //integer format
                                        format: "{0:0}",
                                        width: 150
                                    }, {
                                        field: "ProductId",
                                        title: "@T("Admin.Common.View")",
                                        width: 100,
                                        template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=ProductId#">@T("Admin.Common.View")</a>'
                                    }, {
                                        command: [
                                            {
                                                name: "edit",
                                                text: {
                                                    edit: "@T("Admin.Common.Edit")",
                                                    update: "@T("Admin.Common.Update")",
                                                    cancel: "@T("Admin.Common.Cancel")"
                                                }
                                            }, {
                                                name: "destroy",
                                                text: "@T("Admin.Common.Delete")"
                                            }
                                        ],
                                        width: 200
                                    }
                                ]
                            });
                        });
                    </script>
                </div>

                <div class="panel-footer">
                    <input type="submit" id="btnAddNewProduct" value="@T("Admin.Catalog.Categories.Products.AddNew")"
                           onclick="javascript:OpenWindow('@(Url.Action("ProductAddPopup", "Category", new {categoryId = Model.Id, btnId = "btnRefreshProducts", formId = "category-form"}))', 800, 800, true); return false;"
                           class="btn btn-default" />
                    <input type="submit" id="btnRefreshProducts" style="display: none" />
                    <script type="text/javascript">
                        $(document).ready(function () {
                            $('#btnRefreshProducts').click(function () {
                                //refresh grid
                                var grid = $("#products-grid").data('kendoGrid');
                                grid.dataSource.read();

                                //return false to don't reload a page
                                return false;
                            });
                        });
                    </script>
                </div>
            </div>
        }
        else
        {
            <div class="panel panel-default">
                <div class="panel-body">
                    @T("Admin.Catalog.Categories.Products.SaveBeforeEdit")
                </div>
            </div>
        }
    </div>
}

@helper TabDiscounts()
{
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                @if (Model.AvailableDiscounts != null && Model.AvailableDiscounts.Count > 0)
                {
                    foreach (var discount in Model.AvailableDiscounts)
                    {
                        <div class="checkbox">
                            <label>
                                <input type="checkbox" name="SelectedDiscountIds" value="@discount.Id"
                                       @if (Model.SelectedDiscountIds != null && Model.SelectedDiscountIds.Contains(discount.Id)) { <text> checked="checked" </text>      } />
                                @discount.Name
                            </label>
                        </div>
                    }
                }
                else
                {
                    @T("Admin.Catalog.Categories.Discounts.NoDiscounts")
                }
            </div>
        </div>
    </div>
}

@helper TabAcl()
{
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                <script type="text/javascript">
                    $(document).ready(function() {
                        $("#@Html.FieldIdFor(model => model.SubjectToAcl)").click(toggleAcl);
                        toggleAcl();
                    });

                    function toggleAcl() {
                        if ($('#@Html.FieldIdFor(model => model.SubjectToAcl)').is(':checked')) {
                            $('#pnl-acl').show();
                        } else {
                            $('#pnl-acl').hide();
                        }
                    }
                </script>

                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.SubjectToAcl)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.SubjectToAcl)
                        @Html.ValidationMessageFor(model => model.SubjectToAcl)
                    </div>
                </div>
                <div id="pnl-acl" class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.AvailableCustomerRoles)
                    </div>
                    <div class="col-sm-9">
                        @if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
                        {
                            @Html.Action("AclDisabledWarning", "Common")
                            foreach (var customerRole in Model.AvailableCustomerRoles)
                            {
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id"
                                               checked="@(Model.SelectedCustomerRoleIds != null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))" />
                                        @customerRole.Name
                                    </label>
                                </div>
                            }
                        }
                        else
                        {
                            <text>No customer roles defined</text>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@helper TabStores()
{
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                <script type="text/javascript">
                    $(document).ready(function () {
                        $("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);
                        toggleStoreMapping();
                    });

                    function toggleStoreMapping() {
                        if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
                            $('#pnl-available-stores').show();
                        }
                        else {
                            $('#pnl-available-stores').hide();
                        }
                    }
                </script>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.LimitedToStores)
                    </div>
                    <div class="col-sm-9">
                        @Html.NopEditorFor(model => model.LimitedToStores)
                        @Html.ValidationMessageFor(model => model.LimitedToStores)
                    </div>
                </div>
                <div id="pnl-available-stores" class="form-group">
                    <div class="col-sm-3">
                        @Html.NopLabelFor(model => model.AvailableStores)
                    </div>
                    <div class="col-sm-9">
                        @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                        {
                            @Html.Action("MultistoreDisabledWarning", "Common")
                            foreach (var store in Model.AvailableStores)
                            {
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />
                                        @store.Name
                                    </label>
                                </div>
                            }
                        }
                        else
                        {
                            <text>No stores defined</text>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
