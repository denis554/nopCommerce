@using System.Text
@using System.Text.Encodings.Web
@using Nop.Services.Blogs
@model BlogPostModel
@inject IBlogService blogService

@{
    //resources for product tags input
    Html.AppendCssFileParts("~/lib/tagEditor/jquery.tag-editor.css");
    Html.AppendScriptParts("~/lib/tagEditor/jquery.tag-editor.min.js");
    Html.AppendScriptParts("~/lib/tagEditor/jquery.caret.min.js");
}
<script type="text/javascript">
    @{
        //TODO move to Model
        var blogTags = blogService.GetAllBlogPostTags(0, 0, true);
        var blogTagsSb = new StringBuilder();
        blogTagsSb.Append("var initialBlogTags = [");
        for (int i = 0; i < blogTags.Count; i++)
        {
            var tag = blogTags[i];
            blogTagsSb.Append("'");
            blogTagsSb.Append(JavaScriptEncoder.Default.Encode(tag.Name));
            blogTagsSb.Append("'");
            if (i != blogTags.Count - 1)
            {
                blogTagsSb.Append(",");
            }
        }
        blogTagsSb.Append("]");
    }
    //tags
    $(document).ready(function() {
        @Html.Raw(blogTagsSb.ToString())
        $("#@Html.FieldIdFor(model => model.Tags)").tagEditor({
            autocomplete: {
                delay: 0,
                position: { collision: 'flip' },
                source: initialBlogTags
            },
            delimiter: ',',
            placeholder: '@T("Admin.ContentManagement.Blog.BlogPosts.Fields.Tags.Placeholder")'
        });
    });
</script>
<div class="panel-group">
    <div class="panel panel-default">
        <div class="panel-body">
            <div class="form-group" @(Model.AvailableLanguages.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.LanguageId)
                </div>
                <div class="col-md-9">
                    @Html.NopDropDownListFor(model => model.LanguageId, Model.AvailableLanguages)
                    @Html.ValidationMessageFor(model => model.LanguageId)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.Title)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.Title, required: true)
                    @Html.ValidationMessageFor(model => model.Title)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.Body)
                </div>
                <div class="col-md-9">
                    <div class="input-group input-group-required">
                        @Html.EditorFor(x => x.Body, "RichEditor")
                        <div class="input-group-btn">
                            @Html.RequiredHint()
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Body)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.BodyOverview)
                </div>
                <div class="col-md-9">
                    @Html.NopTextAreaFor(model => model.BodyOverview)
                    @Html.ValidationMessageFor(model => model.BodyOverview)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.Tags)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.Tags)
                    @Html.ValidationMessageFor(model => model.Tags)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.AllowComments)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.AllowComments)
                    @Html.ValidationMessageFor(model => model.AllowComments)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.StartDate)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.StartDate)
                    @Html.ValidationMessageFor(model => model.StartDate)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.EndDate)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.EndDate)
                    @Html.ValidationMessageFor(model => model.EndDate)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.SelectedStoreIds)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(model => model.SelectedStoreIds, new { SelectList = Model.AvailableStores })
                    <script>
                            $(document).ready(function() {
                                var storesIdsInput = $('#@Html.FieldIdFor(model => model.SelectedStoreIds)').data("kendoMultiSelect");
                                storesIdsInput.setOptions({
                                    autoClose: false
                                });

                                @if (Model.AvailableStores.Count == 0)
                                {
                                    <text>
                                storesIdsInput.setOptions({
                                    enable: false,
                                    placeholder: 'No stores available'
                                });
                                storesIdsInput._placeholder();
                                storesIdsInput._enable();
                                </text>
                                }
                            });
                    </script>
                </div>
            </div>
        </div>
    </div>
</div>