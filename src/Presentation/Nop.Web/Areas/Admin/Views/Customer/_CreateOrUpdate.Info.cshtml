@using System.Text.Encodings.Web
@model CustomerModel
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(document).ready(function() {
            $("#@Html.IdFor(model => model.CountryId)").change(function() {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.IdFor(model => model.StateProvinceId)");

                var postData = {
                    countryId: selectedItem,
                    addSelectStateItem: "true"
                };

                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.Action("GetStatesByCountryId", "Country"))",
                    data: postData,
                    success: function(data) {
                        ddlStates.html('');
                        $.each(data, function(id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
                });
            });
        });
    </script>
}
<div class="panel-group">
    <div class="panel panel-default">
        <div class="panel-body">
            @if (Model.UsernamesEnabled)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Username)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Username)
                        @Html.ValidationMessageFor(model => model.Username)
                    </div>
                </div>
            }
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.Email)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.Email)
                    @Html.ValidationMessageFor(model => model.Email)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.Password)
                </div>
                <div class="col-md-9">
                    <div class="input-group">
                        @Html.NopEditorFor(model => model.Password)
                        <div class="input-group-btn">
                            @if (Model.Id > 0)
                            {
                                <button type="submit" name="changepassword" class="btn btn-info">
                                    @T("Admin.Customers.Customers.Fields.Password.Change")
                                </button>
                            }
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Password)
                </div>
            </div>
            @if (Model.Id > 0 && Model.AssociatedExternalAuthRecords.Count > 0)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.AssociatedExternalAuthRecords)
                    </div>
                    <div class="col-md-9">

                        <div id="externalauthrecords-grid"></div>

                        <script>

                            //local datasource
                            var externalauthrecords = [
                            @for (int i = 0; i < Model.AssociatedExternalAuthRecords.Count; i++)
                            {
                                var aear = Model.AssociatedExternalAuthRecords[i];
                                <text>
                                    {
                                        AuthMethodName: "@(Html.Raw(JavaScriptEncoder.Default.Encode(aear.AuthMethodName)))",
                                        Email: "@(Html.Raw(JavaScriptEncoder.Default.Encode(aear.Email)))",
                                        ExternalIdentifier: "@(Html.Raw(JavaScriptEncoder.Default.Encode(aear.ExternalIdentifier)))"
                                    }
                                </text>
                                if (i != Model.AssociatedExternalAuthRecords.Count - 1)
                                {
                                    <text>,</text>
                                }
                            }
                            ];

                            $(document).ready(function () {
                                $("#externalauthrecords-grid").kendoGrid({
                                    dataSource: {
                                        data: externalauthrecords,
                                        schema: {
                                            model: {
                                                fields: {
                                                    AuthMethodName: { type: "string" },
                                                    Email: { type: "string" },
                                                    ExternalIdentifier: { type: "string" }
                                                }
                                            }
                                        },
                                        error: function (e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        }
                                    },
                                    pageable: {
                                        refresh: true,
                                        numeric: false,
                                        previousNext: false,
                                        info: false,
                                        @await Html.PartialAsync("_GridPagerMessages")
                                    },
                                    scrollable: false,
                                    columns: [
                                        {
                                            field: "AuthMethodName",
                                            title: "@T("Admin.Customers.Customers.AssociatedExternalAuth.Fields.AuthMethodName")",
                                            width: 100
                                        }, {
                                            field: "Email",
                                            title: "@T("Admin.Customers.Customers.AssociatedExternalAuth.Fields.Email")",
                                            width: 100
                                        },{
                                            field: "ExternalIdentifier",
                                            title: "@T("Admin.Customers.Customers.AssociatedExternalAuth.Fields.ExternalIdentifier")",
                                            width: 300
                                        }
                                    ]
                                });
                            });

                        </script>
                    </div>
                </div>
            }
        <div class="form-group">
            <div class="col-md-3">
                @Html.NopLabelFor(model => model.SelectedCustomerRoleIds)
            </div>
            <div class="col-md-9">
                <div class="input-group input-group-required">
                    @Html.EditorFor(model => model.SelectedCustomerRoleIds, new { SelectList = Model.AvailableCustomerRoles })
                    <div class="input-group-btn">
                        @Html.RequiredHint()
                    </div>
                </div>
                <script>
                    $(document).ready(function() {
                        var customerRolesIdsInput = $('#@Html.IdFor(model => model.SelectedCustomerRoleIds)').data("kendoMultiSelect");
                        customerRolesIdsInput.setOptions({
                            customerRolesIdsInput: false
                        });

                        @if (Model.AvailableCustomerRoles.Count == 0)
                        {
                            <text>
                                customerRolesIdsInput.setOptions({
                                    enable: false,
                                    placeholder: '@T("Admin.Customers.Customers.Fields.CustomerRoles.NoRoles")'
                                });
                                customerRolesIdsInput._placeholder();
                                customerRolesIdsInput._enable();
                            </text>
                        }
                    });
                </script>
            </div>
        </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.VendorId)
                </div>
                <div class="col-md-9">
                    @Html.NopDropDownListFor(model => model.VendorId, Model.AvailableVendors)
                    @Html.ValidationMessageFor(model => model.VendorId)
                    <em>@T("Admin.Customers.Customers.VendorShouldBeInVendorsRole")</em>
                </div>
            </div>
            @if (Model.GenderEnabled)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Gender)
                    </div>
                    <div class="col-md-9">
                        <div class="raw">
                            <div class="col-md-1">
                                <div class="radio">
                                    <label>
                                        @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "Gender_Male" })
                                        @T("Admin.Customers.Customers.Fields.Gender.Male")
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-11">
                                <div class="radio">
                                    <label>
                                        @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "Gender_Female" })
                                        @T("Admin.Customers.Customers.Fields.Gender.Female")
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.FirstName)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.FirstName)
                    @Html.ValidationMessageFor(model => model.FirstName)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.LastName)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.LastName)
                    @Html.ValidationMessageFor(model => model.LastName)
                </div>
            </div>
            @if (Model.DateOfBirthEnabled)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.DateOfBirth)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.DateOfBirth)
                        @Html.ValidationMessageFor(model => model.DateOfBirth)
                    </div>
                </div>
            }
            @if (Model.CompanyEnabled)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Company)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Company)
                        @Html.ValidationMessageFor(model => model.Company)
                    </div>
                </div>
            }
            @if (Model.StreetAddressEnabled)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.StreetAddress)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.StreetAddress)
                        @Html.ValidationMessageFor(model => model.StreetAddress)
                    </div>
                </div>
            }
            @if (Model.StreetAddress2Enabled)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.StreetAddress2)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.StreetAddress2)
                        @Html.ValidationMessageFor(model => model.StreetAddress2)
                    </div>
                </div>
            }
            @if (Model.ZipPostalCodeEnabled)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.ZipPostalCode)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.ZipPostalCode)
                        @Html.ValidationMessageFor(model => model.ZipPostalCode)
                    </div>
                </div>
            }
            @if (Model.CityEnabled)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.City)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.City)
                        @Html.ValidationMessageFor(model => model.City)
                    </div>
                </div>
            }
            @if (Model.CountryEnabled)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.CountryId)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDropDownList("CountryId", Model.AvailableCountries)
                        @Html.ValidationMessageFor(model => model.CountryId)
                    </div>
                </div>
            }
            @if (Model.CountryEnabled && Model.StateProvinceEnabled)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.StateProvinceId)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDropDownList("StateProvinceId", Model.AvailableStates)
                        @Html.ValidationMessageFor(model => model.StateProvinceId)
                    </div>
                </div>
            }
            @if (Model.PhoneEnabled)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Phone)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Phone)
                        @Html.ValidationMessageFor(model => model.Phone)
                    </div>
                </div>
            }
            @if (Model.FaxEnabled)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Fax)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Fax)
                        @Html.ValidationMessageFor(model => model.Fax)
                    </div>
                </div>
            }
            @if (Model.CustomerAttributes.Count > 0)
            {
                @await Html.PartialAsync("_CustomerAttributes", Model.CustomerAttributes)
            }
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.AdminComment)
                </div>
                <div class="col-md-9">
                    @Html.NopTextAreaFor(model => model.AdminComment)
                    @Html.ValidationMessageFor(model => model.AdminComment)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.IsTaxExempt)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.IsTaxExempt)
                    @Html.ValidationMessageFor(model => model.IsTaxExempt)
                </div>
            </div>
            @if (Model.AllowCustomersToSetTimeZone)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.TimeZoneId)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDropDownList("TimeZoneId", Model.AvailableTimeZones)
                        @Html.ValidationMessageFor(model => model.TimeZoneId)
                    </div>
                </div>
            }
            @if (Model.AffiliateId > 0)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.AffiliateId)
                    </div>
                    <div class="col-md-9">
                        <a href="@Url.Action("Edit", "Affiliate", new {id = Model.AffiliateId})">@Model.AffiliateName - @T("Admin.Common.View")</a>
                        <button type="submit" name="remove-affiliate" class="btn bg-red">
                            @T("Admin.Customers.Customers.Fields.Affiliate.Remove")
                        </button>
                    </div>
                </div>
            }
            @if (Model.DisplayVatNumber)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.VatNumber)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.VatNumber)
                        (@string.Format(T("Admin.Customers.Customers.Fields.VatNumberStatus").Text, Model.VatNumberStatusNote))
                        <button type="submit" name="markVatNumberAsValid" class="btn btn-primary">
                            @T("Admin.Customers.Customers.Fields.VatNumber.MarkAsValid")
                        </button>
                        <button type="submit" name="markVatNumberAsInvalid" class="btn bg-red">
                            @T("Admin.Customers.Customers.Fields.VatNumber.MarkAsInvalid")
                        </button>
                        @Html.ValidationMessageFor(model => model.VatNumber)
                    </div>
                </div>
            }
            @if (Model.AvailableNewsletterSubscriptionStores != null && Model.AvailableNewsletterSubscriptionStores.Count > 0)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.SelectedNewsletterSubscriptionStoreIds)
                    </div>
                    <div class="col-md-9">
                        @foreach (var store in Model.AvailableNewsletterSubscriptionStores)
                        {
                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" name="SelectedNewsletterSubscriptionStoreIds" value="@store.Id" checked="@(Model.SelectedNewsletterSubscriptionStoreIds != null && Model.SelectedNewsletterSubscriptionStoreIds.Contains(store.Id))" />
                                    (@(store.Name))
                                </label>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                @T("Admin.Customers.Customers.Fields.CustomerRoles.NoRoles")
            }
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.Active)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.Active)
                    @Html.ValidationMessageFor(model => model.Active)
                </div>
            </div>
            @if (Model.Id > 0 && !string.IsNullOrEmpty(Model.RegisteredInStore))
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.RegisteredInStore)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDisplayFor(model => model.RegisteredInStore)
                    </div>
                </div>
            }
            @if (Model.Id > 0)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.LastIpAddress)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDisplayFor(model => model.LastIpAddress)
                    </div>
                </div>
            }
            @if (Model.Id > 0)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.CreatedOn)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDisplayFor(model => model.CreatedOn)
                    </div>
                </div>
            }
            @if (Model.Id > 0)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.LastActivityDate)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDisplayFor(model => model.LastActivityDate)
                    </div>
                </div>
            }
            @if (Model.Id > 0 && !String.IsNullOrEmpty(Model.LastVisitedPage))
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.LastVisitedPage)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDisplayFor(model => model.LastVisitedPage)
                    </div>
                </div>
            }
        </div>
    </div>
</div>
