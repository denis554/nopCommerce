@using Nop.Core.Domain.Orders;
@using Nop.Services.Stores
@model CustomerModel

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function() {
        bindBootstrapTabSelectEvent('customer-edit');
    });
</script>

<div class="content">
    <div class="form-horizontal">
        <div id="customer-edit" class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                @Html.RenderBootstrapTabHeader("tab-info", @T("Admin.Customers.Customers.Info"), true)
                @if (Model.Id > 0)
                {
                    @Html.RenderBootstrapTabHeader("tab-orders", @T("Admin.Customers.Customers.Orders"))
                    @Html.RenderBootstrapTabHeader("tab-address", @T("Admin.Customers.Customers.Addresses"))
                    @Html.RenderBootstrapTabHeader("tab-cart", @T("Admin.Customers.Customers.CurrentShoppingCart"))
                    @Html.RenderBootstrapTabHeader("tab-wishlist", @T("Admin.Customers.Customers.CurrentWishlist"))
                    @Html.RenderBootstrapTabHeader("tab-activitylog", @T("Admin.Customers.Customers.ActivityLog"))
                    @Html.RenderBootstrapTabHeader("tab-impersonate", @T("Admin.Customers.Customers.Impersonate"))
                    @Html.RenderBootstrapTabHeader("tab-backinstock", @T("Admin.Customers.Customers.BackInStockSubscriptions"))
                } 
                @if (Model.DisplayRewardPointsHistory)
                {
                    @Html.RenderBootstrapTabHeader("tab-rewardpoints", @T("Admin.Customers.Customers.RewardPoints"))
                }
            </ul>
            <div class="tab-content">
                @Html.RenderBootstrapTabContent("tab-info", await Html.PartialAsync("_CreateOrUpdate.Info", Model), true)
                @if (Model.Id > 0)
                {
                    @Html.RenderBootstrapTabContent("tab-orders", await Html.PartialAsync("_CreateOrUpdate.Orders", Model))
                    @Html.RenderBootstrapTabContent("tab-address", await Html.PartialAsync("_CreateOrUpdate.Addresses", Model))
                    @Html.RenderBootstrapTabContent("tab-cart", await Html.PartialAsync("_CreateOrUpdate.CurrentShoppingCart", Model))
                    @Html.RenderBootstrapTabContent("tab-wishlist", await Html.PartialAsync("_CreateOrUpdate.CurrentWishlist", Model))
                    @Html.RenderBootstrapTabContent("tab-activitylog", await Html.PartialAsync("_CreateOrUpdate.ActivityLog", Model))
                    @Html.RenderBootstrapTabContent("tab-impersonate", await Html.PartialAsync("_CreateOrUpdate.Impersonate", Model))
                    @Html.RenderBootstrapTabContent("tab-backinstock", await Html.PartialAsync("_CreateOrUpdate.BackInStockSubscriptions", Model))
                } 
                @if (Model.DisplayRewardPointsHistory)
                {
                    @Html.RenderBootstrapTabContent("tab-rewardpoints", await Html.PartialAsync("_CreateOrUpdate.RewardPoints", Model))
                }
            </div>
        </div>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "customer-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab name*@
<input type="hidden" id="selected-tab-name" name="selected-tab-name" value="@(Html.GetSelectedTabName())">