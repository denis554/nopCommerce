@model CheckoutAttributeModel
@using Nop.Core.Domain.Catalog
@using Nop.Services

<script type="text/javascript">
    $(document).ready(function() {

        $("#@Html.FieldIdFor(model => model.IsTaxExempt)").click(toggleTax);
        $("#@Html.FieldIdFor(model => model.AttributeControlTypeId)").change(toggleAttributeControlType);

        toggleTax();
        toggleAttributeControlType();
    });

    function toggleTax() {
        if ($('#@Html.FieldIdFor(model => model.IsTaxExempt)').is(':checked')) {
            $('#pnlTaxCategory').hide();
        } else {
            $('#pnlTaxCategory').show();
        }
    }

    function toggleAttributeControlType() {
        var selectedAttributeControlTypeId = $("#@Html.FieldIdFor(model => model.AttributeControlTypeId)").val();
        //validation
        if (selectedAttributeControlTypeId == @(((int) AttributeControlType.TextBox).ToString())) {
            $('#pnlValidationMinLength').show();
            $('#pnlValidationMaxLength').show();
            $('#pnlValidationFileMaximumSize').hide();
            $('#pnlValidationFileAllowedExtensions').hide();
            $('#pnlDefaultValue').show();
        } else if (selectedAttributeControlTypeId == @(((int) AttributeControlType.MultilineTextbox).ToString())) {
            $('#pnlValidationMinLength').show();
            $('#pnlValidationMaxLength').show();
            $('#pnlValidationFileMaximumSize').hide();
            $('#pnlValidationFileAllowedExtensions').hide();
            $('#pnlDefaultValue').show();
        } else if (selectedAttributeControlTypeId == @(((int) AttributeControlType.FileUpload).ToString())) {
            $('#pnlValidationMinLength').hide();
            $('#pnlValidationMaxLength').hide();
            $('#pnlValidationFileMaximumSize').show();
            $('#pnlValidationFileAllowedExtensions').show();
            $('#pnlDefaultValue').hide();
        } else {
            $('#pnlValidationMinLength').hide();
            $('#pnlValidationMaxLength').hide();
            $('#pnlValidationFileMaximumSize').hide();
            $('#pnlValidationFileAllowedExtensions').hide();
            $('#pnlDefaultValue').hide();
        }

        //values
        if (selectedAttributeControlTypeId == @(((int) AttributeControlType.DropdownList).ToString()) ||
            selectedAttributeControlTypeId == @(((int) AttributeControlType.RadioList).ToString()) ||
            selectedAttributeControlTypeId == @(((int) AttributeControlType.Checkboxes).ToString()) ||
            selectedAttributeControlTypeId == @(((int) AttributeControlType.ColorSquares).ToString()) ||
            selectedAttributeControlTypeId == @(((int) AttributeControlType.ImageSquares).ToString()) ||
            selectedAttributeControlTypeId == @(((int) AttributeControlType.ReadonlyCheckboxes).ToString())) {
                $('[data-tab-name=tab-values]').show();
        } else {
            $('[data-tab-name=tab-values]').hide();
        }
    }
</script>

<div class="panel-group">
    <div class="panel panel-default">
        <div class="panel-body">
            @(Html.LocalizedEditor<CheckoutAttributeModel, CheckoutAttributeLocalizedModel>("checkoutattribute-localized",
            @<div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Locales[item].Name)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Locales[item].Name)
                        @Html.ValidationMessageFor(model => model.Locales[item].Name)
                    </div>
                </div>
                <div class="form-group advanced-setting">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Locales[item].TextPrompt)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Locales[item].TextPrompt)
                        @Html.ValidationMessageFor(model => model.Locales[item].TextPrompt)
                    </div>
                </div>
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </div>
,
            @<div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Name)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Name, required: true)
                        @Html.ValidationMessageFor(model => model.Name)
                    </div>
                </div>
                <div class="form-group advanced-setting">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.TextPrompt)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.TextPrompt)
                        @Html.ValidationMessageFor(model => model.TextPrompt)
                    </div>
                </div>
            </div>
))
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.IsRequired)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.IsRequired)
                    @Html.ValidationMessageFor(model => model.IsRequired)
                </div>
            </div>
            <div class="form-group advanced-setting">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.ShippableProductRequired)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.ShippableProductRequired)
                    @Html.ValidationMessageFor(model => model.ShippableProductRequired)
                </div>
            </div>
            <div class="form-group advanced-setting">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.IsTaxExempt)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.IsTaxExempt)
                    @Html.ValidationMessageFor(model => model.IsTaxExempt)
                </div>
            </div>
            <div class="form-group advanced-setting" id="pnlTaxCategory">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.TaxCategoryId)
                </div>
                <div class="col-md-9">
                    @Html.NopDropDownListFor(model => model.TaxCategoryId, Model.AvailableTaxCategories)
                    @Html.ValidationMessageFor(model => model.TaxCategoryId)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.AttributeControlTypeId)
                </div>
                <div class="col-md-9">
                    @{
                        var attributeControlTypes = ((AttributeControlType)Model.AttributeControlTypeId)
                            .ToSelectList(valuesToExclude:
                            //these attributes don't support some control types
                            new[] { (int)AttributeControlType.ImageSquares });
                    }
                    @Html.NopDropDownListFor(model => model.AttributeControlTypeId, attributeControlTypes)
                    @Html.ValidationMessageFor(model => model.AttributeControlTypeId)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.DisplayOrder)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.DisplayOrder)
                    @Html.ValidationMessageFor(model => model.DisplayOrder)
                </div>
            </div>
            <div class="form-group advanced-setting" id="pnlValidationMinLength">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.ValidationMinLength)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.ValidationMinLength)
                    @Html.ValidationMessageFor(model => model.ValidationMinLength)
                </div>
            </div>
            <div class="form-group advanced-setting" id="pnlValidationMaxLength">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.ValidationMaxLength)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.ValidationMaxLength)
                    @Html.ValidationMessageFor(model => model.ValidationMaxLength)
                </div>
            </div>
            <div class="form-group advanced-setting" id="pnlValidationFileAllowedExtensions">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.ValidationFileAllowedExtensions)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.ValidationFileAllowedExtensions)
                    @Html.ValidationMessageFor(model => model.ValidationFileAllowedExtensions)
                </div>
            </div>
            <div class="form-group advanced-setting" id="pnlValidationFileMaximumSize">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.ValidationFileMaximumSize)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.ValidationFileMaximumSize)
                    @Html.ValidationMessageFor(model => model.ValidationFileMaximumSize)
                </div>
            </div>
            <div class="form-group advanced-setting" id="pnlDefaultValue">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.DefaultValue)
                </div>
                <div class="col-md-9">
                    @Html.NopEditorFor(model => model.DefaultValue)
                    @Html.ValidationMessageFor(model => model.DefaultValue)
                </div>
            </div>
            <div class="form-group advanced-setting">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.SelectedStoreIds)
                </div>
                <div class="col-md-9">
                    <div class="row">
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.SelectedStoreIds, new {SelectList = Model.AvailableStores})
                            <script>
                                $(document).ready(function() {
                                    var storesIdsInput = $('#@Html.FieldIdFor(model => model.SelectedStoreIds)').data("kendoMultiSelect");
                                    storesIdsInput.setOptions({
                                        autoClose: false
                                    });

                                    @if (Model.AvailableStores.Count == 0)
                                    {
                                        <text>
                                storesIdsInput.setOptions({
                                    enable: false,
                                    placeholder: 'No stores available'
                                });
                                storesIdsInput._placeholder();
                                storesIdsInput._enable();
                                </text>
                                    }
                                });
                            </script>
                        </div>
                        <div class="col-md-8">
                            @await Component.InvokeAsync("MultistoreDisabledWarning")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
